
R version 2.14.1 (2011-12-22)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-apple-darwin9.8.0/x86_64 (64-bit)

R est un logiciel libre livré sans AUCUNE GARANTIE.
Vous pouvez le redistribuer sous certaines conditions.
Tapez 'license()' ou 'licence()' pour plus de détails.

R est un projet collaboratif avec de nombreux contributeurs.
Tapez 'contributors()' pour plus d'information et
'citation()' pour la façon de le citer dans les publications.

Tapez 'demo()' pour des démonstrations, 'help()' pour l'aide
en ligne ou 'help.start()' pour obtenir l'aide au format HTML.
Tapez 'q()' pour quitter R.

> .help.ESS <- help
> options(STERM='iESS', editor='emacsclient')
> ## Emacs: -*- coding: utf-8; fill-column: 62; comment-column: 27; -*-
>
> ###
> ### COMMANDES R
> ###
>
> ## Les expressions entrées à la ligne de commande sont
> ## immédiatement évaluées et le résultat est affiché à
> ## l'écran, comme avec une grosse calculatrice.
> 1                          # une constante
[1] 1
> (2 + 3 * 5)/7              # priorité des opérations
[1] 2.428571
> 3^5                        # puissance
[1] 243
> exp(3)                     # fonction exponentielle
[1] 20.08554
> sin(pi/2) + cos(pi/2)      # fonctions trigonométriques
[1] 1
> gamma(5)                   # fonction gamma
[1] 24
>
> ## Lorsqu'une expression est syntaxiquement incomplète,
> ## l'invite de commande change de '> ' à '+ '.
> 2 -                        # expression incomplète
+ 5 *                        # toujours incomplète
+ 3                          # complétée
[1] -13
>
> ## Taper le nom d'un objet affiche son contenu. Pour une
> ## fonction, c'est son code source qui est affiché.
> pi                         # constante numérique intégrée
[1] 3.141593
> letters                    # chaîne de caractères intégrée
 [1] "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s"
[20] "t" "u" "v" "w" "x" "y" "z"
> LETTERS                    # version en majuscules
 [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S"
[20] "T" "U" "V" "W" "X" "Y" "Z"
> matrix                     # fonction
function (data = NA, nrow = 1, ncol = 1, byrow = FALSE, dimnames = NULL)
{
    if (is.object(data) || !is.atomic(data))
        data <- as.vector(data)
    .Internal(matrix(data, nrow, ncol, byrow, dimnames, missing(nrow),
        missing(ncol)))
}
<bytecode: 0x100c45a60>
<environment: namespace:base>
>
> ## Ne pas utiliser '=' pour l'affectation. Les opérateurs
> ## d'affectation standard en R sont '<-' et '->'.
> x <- 5                     # affecter 5 à l'objet 'x'
> 5 -> x                     # idem, mais peu usité
> x                          # voir le contenu
[1] 5
> (x <- 5)                   # affecter et afficher
[1] 5
> y <- x                     # affecter la valeur de 'x' à 'y'
> x <- y <- 5                # idem, en une seule expression
> y                          # 5
[1] 5
> x <- 0                     # changer la valeur de 'x'...
> y                          # ... ne change pas celle de 'y'
[1] 5
>
> ## Pour regrouper plusieurs expressions en une seule commande,
> ## il faut soit les séparer par un point-virgule ';', soit les
> ## regrouper à l'intérieur d'accolades { } et les séparer par
> ## des retours à la ligne.
> x <- 5; y <- 2; x + y      # compact; éviter dans les scripts
[1] 7
> x <- 5;                    # éviter les ';' superflus
> {                          # début d'un groupe
+     x <- 5                 # première expression du groupe
+     y <- 2                 # seconde expression du groupe
+     x + y                  # résultat du groupe
+ }                          # fin du groupe et résultat
[1] 7
> {x <- 5; y <- 2; x + y}    # valide, mais redondant
[1] 7
>
> ###
> ### NOMS D'OBJETS
> ###
>
> ## Quelques exemples de noms valides et invalides.
> foo <- 5                   # valide
> foo.123 <- 5               # valide
> foo_123 <- 5               # valide
> 123foo <- 5                # invalide; commence par un chiffre
Erreur : symbole inattendu(e) dans "123foo"
> .foo <- 5                  # valide
> .123foo <- 5               # invalide; point suivi d'un chiffre
Erreur : symbole inattendu(e) dans ".123foo"
>
> ## Liste des objets dans l'espace de travail. Les objets dont
> ## le nom commence par un point sont considérés cachés.
> ls()                       # l'objet '.foo' n'est pas affiché
[1] "foo"     "foo_123" "foo.123" "x"       "y"
> ls(all.names = TRUE)       # objets cachés aussi affichés
[1] ".foo"      ".help.ESS" "foo"       "foo_123"   "foo.123"   "x"
[7] "y"
>
> ## R est sensible à la casse
> foo <- 1
> Foo
Erreur : objet 'Foo' introuvable
> FOO
Erreur : objet 'FOO' introuvable
>
> ###
> ### LES OBJETS R
> ###
>
> ## MODES ET TYPES DE DONNÉES
>
> ## Le mode d'un objet détermine ce qu'il peut contenir. Les
> ## vecteurs simples ("atomic") contiennent des données d'un
> ## seul type.
> mode(c(1, 4.1, pi))        # nombres réels
[1] "numeric"
> mode(c(2, 1 + 5i))         # nombres complexes
[1] "complex"
> mode(c(TRUE, FALSE, TRUE)) # valeurs booléennes
[1] "logical"
> mode("foobar")             # chaînes de caractères
[1] "character"
>
> ## Si l'on mélange dans un même vecteur des objets de mode
> ## différents, il y a conversion automatique vers le mode pour
> ## lequel il y a le moins de perte d'information, c'est-à-dire
> ## vers le mode qui permet le mieux de retrouver la valeur
> ## originale des éléments.
> c(5, TRUE, FALSE)          # conversion en mode 'numeric'
[1] 5 1 0
> c(5, "z")                  # conversion en mode 'character'
[1] "5" "z"
> c(TRUE, "z")               # conversion en mode 'character'
[1] "TRUE" "z"
> c(5, TRUE, "z")            # conversion en mode 'character'
[1] "5"    "TRUE" "z"
>
> ## La plupart des autres types d'objets sont récursifs. Voici
> ## quelques autres modes.
> mode(seq)                  # une fonction
[1] "function"
> mode(list(5, "foo", TRUE)) # une liste
[1] "list"
> mode(expression(x <- 5))   # une expression non évaluée
[1] "expression"
>
> ## LONGUEUR
>
> ## La longueur d'un vecteur est égale au nombre d'éléments
> ## dans le vecteur.
> (x <- 1:4)
[1] 1 2 3 4
> length(x)
[1] 4
>
> ## Une chaîne de caractères ne compte que pour un seul
> ## élément.
> (x <- "foobar")
[1] "foobar"
> length(x)
[1] 1
>
> ## Pour obtenir la longueur de la chaîne, il faut utiliser
> ## nchar().
> nchar(x)
[1] 6
>
> ## Un objet peut néanmoins contenir plusieurs chaînes de
> ## caractères.
> (x <- c("f", "o", "o", "b", "a", "r"))
[1] "f" "o" "o" "b" "a" "r"
> length(x)
[1] 6
>
> ## La longueur peut être 0, auquel cas on a un objet vide,
> ## mais qui existe.
> (x <- numeric(0))          # création du contenant
numeric(0)
> length(x)                  # l'objet 'x' existe...
[1] 0
> x[1] <- 1                  # possible, 'x' existe
> X[1] <- 1                  # impossible, 'X' n'existe pas
Erreur dans X[1] <- 1 : objet 'X' introuvable
>
> ## L'OBJET SPECIAL 'NULL'
> mode(NULL)                 # le mode de 'NULL' est NULL
[1] "NULL"
> length(NULL)               # longueur nulle
[1] 0
> x <- c(NULL, NULL)         # s'utilise comme un objet normal
> x; length(x); mode(x)      # mais donne toujours le vide
NULL
[1] 0
[1] "NULL"
>
> ## L'OBJET SPÉCIAL 'NA'
> x <- c(65, NA, 72, 88)     # traité comme une valeur
> x + 2                      # tout calcul avec 'NA' donne NA
[1] 67 NA 74 90
> mean(x)                    # voilà qui est pire
[1] NA
> mean(x, na.rm = TRUE)      # éliminer les 'NA' avant le calcul
[1] 75
> is.na(x)                   # tester si les données sont 'NA'
[1] FALSE  TRUE FALSE FALSE
>
> ## VALEURS INFINIES ET INDÉTERMINÉES
> 1/0                        # +infini
[1] Inf
> -1/0                       # -infini
[1] -Inf
> 0/0                        # indétermination
[1] NaN
> x <- c(65, Inf, NaN, 88)   # s'utilisent comme des valeurs
> is.finite(x)               # quels sont les nombres réels?
[1]  TRUE FALSE FALSE  TRUE
> is.nan(x)                  # lesquels ne sont «pas un nombre»?
[1] FALSE FALSE  TRUE FALSE
>
> ## ATTRIBUTS
>
> ## Les objets peuvent être dotés d'un ou plusieurs attributs.
> data(cars)                 # jeu de données intégré
> attributes(cars)           # liste de tous les attributs
$names
[1] "speed" "dist"

$row.names
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50

$class
[1] "data.frame"

> attr(cars, "class")        # extraction d'un seul attribut
[1] "data.frame"
>
> ## Attribut 'class'. Selon la classe d'un objet, certaines
> ## fonctions (dites «fonctions génériques») vont se comporter
> ## différemment.
> x <- sample(1:100, 10)     # échantillon aléatoire de 10
>                            # nombres entre 1 et 100
> class(x)                   # classe de l'objet
[1] "integer"
> plot(x)                    # graphique pour cette classe
> class(x) <- "ts"           # 'x' est maintenant une série
>                            # chronologique
> plot(x)                    # graphique pour les séries
>                            # chronologiques
> class(x) <- NULL; x        # suppression de l'attribut 'class'
 [1] 95 57 26 60 62 53 23 49 73 15
>
> ## Attribut 'dim'. Si l'attribut 'dim' compte deux valeurs,
> ## l'objet est traité comme une matrice. S'il en compte plus
> ## de deux, l'objet est traité comme un tableau (array).
> x <- 1:24                  # un vecteur
> dim(x) <- c(4, 6)          # ajoute un attribut 'dim'
> x                          # l'objet est une matrice
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    1    5    9   13   17   21
[2,]    2    6   10   14   18   22
[3,]    3    7   11   15   19   23
[4,]    4    8   12   16   20   24
> dim(x) <- c(4, 2, 3)       # change les dimensions
> x                          # l'objet est maintenant un tableau
, , 1

     [,1] [,2]
[1,]    1    5
[2,]    2    6
[3,]    3    7
[4,]    4    8

, , 2

     [,1] [,2]
[1,]    9   13
[2,]   10   14
[3,]   11   15
[4,]   12   16

, , 3

     [,1] [,2]
[1,]   17   21
[2,]   18   22
[3,]   19   23
[4,]   20   24

>
> ## Attribut 'dimnames'. Permet d'assigner des étiquettes (ou
> ## noms) aux dimensions d'une matrice ou d'un tableau.
> dimnames(x) <- list(1:4, c("a", "b"), c("A", "B", "C"))
> dimnames(x)                # remarquer la conversion
[[1]]
[1] "1" "2" "3" "4"

[[2]]
[1] "a" "b"

[[3]]
[1] "A" "B" "C"

> x                          # affichage avec étiquettes
, , A

  a b
1 1 5
2 2 6
3 3 7
4 4 8

, , B

   a  b
1  9 13
2 10 14
3 11 15
4 12 16

, , C

   a  b
1 17 21
2 18 22
3 19 23
4 20 24

> attributes(x)              # tous les attributs de 'x'
$dim
[1] 4 2 3

$dimnames
$dimnames[[1]]
[1] "1" "2" "3" "4"

$dimnames[[2]]
[1] "a" "b"

$dimnames[[3]]
[1] "A" "B" "C"


> attributes(x) <- NULL; x   # supprimer les attributs
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
>
> ## Attributs 'names'. Similaire à 'dimnames', mais pour les
> ## éléments d'un vecteur ou d'une liste.
> names(x) <- letters[1:24]  # attribution d'étiquettes
> x                          # identification facilitée
 a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x
 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
>
> ###
> ### VECTEURS
> ###
>
> ## La fonction de base pour créer des vecteurs est 'c'. Il
> ## peut s'avérer utile de donner des étiquettes aux éléments
> ## d'un vecteur.
> x <- c(a = -1, b = 2, c = 8, d = 10) # création d'un vecteur
> names(x)                             # extraire les étiquettes
[1] "a" "b" "c" "d"
> names(x) <- letters[1:length(x)]     # changer les étiquettes
> x[1]                       # extraction par position
 a
-1
> x["c"]                     # extraction par étiquette
c
8
> x[-2]                      # élimination d'un élément
 a  c  d
-1  8 10
>
> ## La fonction 'vector' sert à initialiser des vecteurs avec
> ## des valeurs prédéterminées. Elle compte deux arguments: le
> ## mode du vecteur et sa longueur. Les fonctions 'numeric',
> ## 'logical', 'complex' et 'character' constituent des
> ## raccourcis pour des appels à 'vector'.
> vector("numeric", 5)       # vecteur initialisé avec des 0
[1] 0 0 0 0 0
> numeric(5)                 # équivalent
[1] 0 0 0 0 0
> numeric                    # en effet, voici la fonction
function (length = 0L)
.Internal(vector("double", length))
<bytecode: 0x100ea47f8>
<environment: namespace:base>
> logical(5)                 # initialisé avec FALSE
[1] FALSE FALSE FALSE FALSE FALSE
> complex(5)                 # initialisé avec 0 + 0i
[1] 0+0i 0+0i 0+0i 0+0i 0+0i
> character(5)               # initialisé avec chaînes vides
[1] "" "" "" "" ""
>
> ###
> ### MATRICES ET TABLEAUX
> ###
>
> ## Une matrice est un vecteur avec un attribut 'dim' de
> ## longueur 2 une classe implicite "matrix". La manière
> ## naturelle de créer une matrice est avec la fonction
> ## 'matrix'.
> (x <- matrix(1:12, nrow = 3, ncol = 4)) # créer la matrice
     [,1] [,2] [,3] [,4]
[1,]    1    4    7   10
[2,]    2    5    8   11
[3,]    3    6    9   12
> length(x)                  # 'x' est un vecteur...
[1] 12
> dim(x)                     # ... avec un attribut 'dim'...
[1] 3 4
> class(x)                   # ... et classe implicite "matrix"
[1] "matrix"
>
> ## Une manière moins naturelle mais équivalente --- et parfois
> ## plus pratique --- de créer une matrice consiste à ajouter
> ## un attribut 'dim' à un vecteur.
> x <- 1:12                  # vecteur simple
> dim(x) <- c(3, 4)          # ajout d'un attribut 'dim'
> x; class(x)                # 'x' est une matrice!
     [,1] [,2] [,3] [,4]
[1,]    1    4    7   10
[2,]    2    5    8   11
[3,]    3    6    9   12
[1] "matrix"
>
> ## Les matrices sont remplies par colonne par défaut. Utiliser
> ## l'option 'byrow' pour remplir par ligne.
> matrix(1:12, nrow = 3, byrow = TRUE)
     [,1] [,2] [,3] [,4]
[1,]    1    2    3    4
[2,]    5    6    7    8
[3,]    9   10   11   12
>
> ## Indicer la matrice ou le vecteur sous-jacent est
> ## équivalent. Utiliser l'approche la plus simple selon le
> ## contexte.
> x[1, 3]                    # l'élément en position (1, 3)...
[1] 7
> x[7]                       # ... est le 7e élément du vecteur
[1] 7
> x[1, ]                     # première ligne
[1]  1  4  7 10
> x[, 2]                     # deuxième colonne
[1] 4 5 6
> nrow(x)                    # nombre de lignes
[1] 3
> dim(x)[1]                  # idem
[1] 3
> ncol(x)                    # nombre de colonnes
[1] 4
> dim(x)[2]                  # idem
[1] 4
>
> ## Fusion de matrices et vecteurs.
> x <- matrix(1:12, 3, 4)    # 'x' est une matrice 3 x 4
> y <- matrix(1:8, 2, 4)     # 'y' est une matrice 2 x 4
> z <- matrix(1:6, 3, 2)     # 'z' est une matrice 3 x 2
> rbind(x, 1:4)              # ajout d'une ligne à 'x'
     [,1] [,2] [,3] [,4]
[1,]    1    4    7   10
[2,]    2    5    8   11
[3,]    3    6    9   12
[4,]    1    2    3    4
> rbind(x, y)                # fusion verticale de 'x' et 'y'
     [,1] [,2] [,3] [,4]
[1,]    1    4    7   10
[2,]    2    5    8   11
[3,]    3    6    9   12
[4,]    1    3    5    7
[5,]    2    4    6    8
> cbind(x, 1:3)              # ajout d'une colonne à 'x'
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    4    7   10    1
[2,]    2    5    8   11    2
[3,]    3    6    9   12    3
> cbind(x, z)                # concaténation de 'x' et 'z'
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    1    4    7   10    1    4
[2,]    2    5    8   11    2    5
[3,]    3    6    9   12    3    6
> rbind(x, z)                # dimensions incompatibles
Erreur dans rbind(x, z) :
  le nombre de colonnes des matrices doit correspondre (voir argument 2)
> cbind(x, y)                # dimensions incompatibles
Erreur dans cbind(x, y) :
  le nombre de lignes des matrices doit correspondre (voir argument 2)
>
> ## Les vecteurs ligne et colonne sont rarement nécessaires. On
> ## peut les créer avec les fonctions 'rbind' et 'cbind',
> ## respectivement.
> rbind(1:3)                 # un vecteur ligne
     [,1] [,2] [,3]
[1,]    1    2    3
> cbind(1:3)                 # un vecteur colonne
     [,1]
[1,]    1
[2,]    2
[3,]    3
>
> ## Un tableau (array) est un vecteur avec un attribut 'dim' de
> ## longueur supérieure à 2 et une classe implicite "array".
> ## Quant au reste, la manipulation des tableaux est en tous
> ## points identique à celle des matrices. Ne pas oublier:
> ## les tableaux sont remplis de la première dimension à la
> ## dernière!
> x <- array(1:60, 3:5)      # tableau 3 x 4 x 5
> length(x)                  # 'x' est un vecteur...
[1] 60
> dim(x)                     # ... avec un attribut 'dim'...
[1] 3 4 5
> class(x)                   # ... une classe implicite "array"
[1] "array"
> x[1, 3, 2]                 # l'élément en position (1, 3, 2)...
[1] 19
> x[19]                      # ... est l'élément 19 du vecteur
[1] 19
>
> ## Le tableau ci-dessus est un prisme rectangulaire 3 unités
> ## de haut, 4 de large et 5 de profond. Indicer ce prisme avec
> ## un seul indice équivaut à en extraire des «tranches», alors
> ## qu'utiliser deux indices équivaut à en tirer des «carottes»
> ## (au sens géologique du terme). Il est laissé en exercice de
> ## généraliser à plus de dimensions...
> x                          # les cinq matrices
, , 1

     [,1] [,2] [,3] [,4]
[1,]    1    4    7   10
[2,]    2    5    8   11
[3,]    3    6    9   12

, , 2

     [,1] [,2] [,3] [,4]
[1,]   13   16   19   22
[2,]   14   17   20   23
[3,]   15   18   21   24

, , 3

     [,1] [,2] [,3] [,4]
[1,]   25   28   31   34
[2,]   26   29   32   35
[3,]   27   30   33   36

, , 4

     [,1] [,2] [,3] [,4]
[1,]   37   40   43   46
[2,]   38   41   44   47
[3,]   39   42   45   48

, , 5

     [,1] [,2] [,3] [,4]
[1,]   49   52   55   58
[2,]   50   53   56   59
[3,]   51   54   57   60

> x[, , 1]                   # tranches de haut en bas
     [,1] [,2] [,3] [,4]
[1,]    1    4    7   10
[2,]    2    5    8   11
[3,]    3    6    9   12
> x[, 1, ]                   # tranches d'avant à l'arrière
     [,1] [,2] [,3] [,4] [,5]
[1,]    1   13   25   37   49
[2,]    2   14   26   38   50
[3,]    3   15   27   39   51
> x[1, , ]                   # tranches de gauche à droite
     [,1] [,2] [,3] [,4] [,5]
[1,]    1   13   25   37   49
[2,]    4   16   28   40   52
[3,]    7   19   31   43   55
[4,]   10   22   34   46   58
> x[, 1, 1]                  # carotte de haut en bas
[1] 1 2 3
> x[1, 1, ]                  # carotte d'avant à l'arrière
[1]  1 13 25 37 49
> x[1, , 1]                  # carotte de gauche à droite
[1]  1  4  7 10
>
> ###
> ### LISTES
> ###
>
> ## La liste est l'objet le plus général en R. C'est un objet
> ## récursif qui peut contenir des objets de n'importe quel
> ## mode et longueur.
> (x <- list(joueur = c("V", "C", "C", "M", "A"),
+            score = c(10, 12, 11, 8, 15),
+            expert = c(FALSE, TRUE, FALSE, TRUE, TRUE),
+            niveau = 2))
$joueur
[1] "V" "C" "C" "M" "A"

$score
[1] 10 12 11  8 15

$expert
[1] FALSE  TRUE FALSE  TRUE  TRUE

$niveau
[1] 2

> is.vector(x)               # vecteur...
[1] TRUE
> length(x)                  # ... de quatre éléments...
[1] 4
> mode(x)                    # ... de mode "list"
[1] "list"
> is.recursive(x)            # objet récursif
[1] TRUE
>
> ## Comme tout autre vecteur, une liste peut être concaténée
> ## avec un autre vecteur avec la fonction 'c'.
> y <- list(TRUE, 1:5)       # liste de deux éléments
> c(x, y)                    # liste de six éléments
$joueur
[1] "V" "C" "C" "M" "A"

$score
[1] 10 12 11  8 15

$expert
[1] FALSE  TRUE FALSE  TRUE  TRUE

$niveau
[1] 2

[[5]]
[1] TRUE

[[6]]
[1] 1 2 3 4 5

>
> ## Pour initialiser une liste d'une longueur déterminée, mais
> ## dont chaque élément est vide, uitliser la fonction
> ## 'vector'.
> vector("list", 5)          # liste de NULL
[[1]]
NULL

[[2]]
NULL

[[3]]
NULL

[[4]]
NULL

[[5]]
NULL

>
> ## Pour extraire un élément d'une liste, il faut utiliser les
> ## doubles crochets [[ ]]. Les simples crochets [ ]
> ## fonctionnent aussi, mais retournent une sous liste -- ce
> ## qui est rarement ce que l'on souhaite.
> x[[1]]                     # premier élément de la liste...
[1] "V" "C" "C" "M" "A"
> mode(x[[1]])               # ... un vecteur
[1] "character"
> x[1]                       # aussi le premier élément...
$joueur
[1] "V" "C" "C" "M" "A"

> mode(x[1])                 # ... mais une sous liste...
[1] "list"
> length(x[1])               # ... d'un seul élément
[1] 1
> x[[2]][1]                  # 1er élément du 2e élément
[1] 10
> x[[c(2, 1)]]               # idem, par indiçage récursif
[1] 10
>
> ## Les éléments d'une liste étant généralement nommés (c'est
> ## une bonne habitude à prendre!), il est souvent plus simple
> ## et sûr d'extraire les éléments d'une liste par leur
> ## étiquette.
> x$joueur                   # équivalent à a[[1]]
[1] "V" "C" "C" "M" "A"
> x$score[1]                 # équivalent à a[[c(2, 1)]]
[1] 10
> x[["expert"]]              # aussi valide, mais peu usité
[1] FALSE  TRUE FALSE  TRUE  TRUE
> x$level <- 1               # aussi pour l'affectation
>
> ## Une liste peut contenir n'importe quoi...
> x[[5]] <- matrix(1, 2, 2)  # ... une matrice...
> x[[6]] <- list(20:25, TRUE)# ... une autre liste...
> x[[7]] <- seq              # ... même le code d'une fonction!
> x                          # eh ben!
$joueur
[1] "V" "C" "C" "M" "A"

$score
[1] 10 12 11  8 15

$expert
[1] FALSE  TRUE FALSE  TRUE  TRUE

$niveau
[1] 2

$level
     [,1] [,2]
[1,]    1    1
[2,]    1    1

[[6]]
[[6]][[1]]
[1] 20 21 22 23 24 25

[[6]][[2]]
[1] TRUE


[[7]]
function (...)
UseMethod("seq")
<bytecode: 0x102f3b668>
<environment: namespace:base>

> x[[c(6, 1, 3)]]            # de quel élément s'agit-il?
[1] 22
>
> ## Pour supprimer un élément d'une liste, lui assigner la
> ## valeur 'NULL'.
> x[[7]] <- NULL; length(x)  # suppression du 7e élément
[1] 6
>
> ## Il est parfois utile de convertir une liste en un simple
> ## vecteur. Les éléments de la liste sont alors «déroulés», y
> ## compris la matrice en position 5 (qui n'est rien d'autre
> ## qu'un vecteur, on s'en souviendra).
> unlist(x)                    # remarquer la conversion
joueur1 joueur2 joueur3 joueur4 joueur5  score1  score2  score3  score4  score5
    "V"     "C"     "C"     "M"     "A"    "10"    "12"    "11"     "8"    "15"
expert1 expert2 expert3 expert4 expert5  niveau  level1  level2  level3  level4
"FALSE"  "TRUE" "FALSE"  "TRUE"  "TRUE"     "2"     "1"     "1"     "1"     "1"

   "20"    "21"    "22"    "23"    "24"    "25"  "TRUE"
> unlist(x, recursive = FALSE) # ne pas appliquer aux sous-listes
$joueur1
[1] "V"

$joueur2
[1] "C"

$joueur3
[1] "C"

$joueur4
[1] "M"

$joueur5
[1] "A"

$score1
[1] 10

$score2
[1] 12

$score3
[1] 11

$score4
[1] 8

$score5
[1] 15

$expert1
[1] FALSE

$expert2
[1] TRUE

$expert3
[1] FALSE

$expert4
[1] TRUE

$expert5
[1] TRUE

$niveau
[1] 2

$level1
[1] 1

$level2
[1] 1

$level3
[1] 1

$level4
[1] 1

[[21]]
[1] 20 21 22 23 24 25

[[22]]
[1] TRUE

> unlist(x, use.names = FALSE) # éliminer les étiquettes
 [1] "V"     "C"     "C"     "M"     "A"     "10"    "12"    "11"    "8"
[10] "15"    "FALSE" "TRUE"  "FALSE" "TRUE"  "TRUE"  "2"     "1"     "1"
[19] "1"     "1"     "20"    "21"    "22"    "23"    "24"    "25"    "TRUE"
>
> ###
> ### DATA FRAMES
> ###
>
> ## Un data frame est une liste dont les éléments sont tous de
> ## même longueur. Il comporte un attribut 'dim', ce qui fait
> ## qu'il est représenté comme une matrice. Cependant, les
> ## colonnes peuvent être de modes différents.
> (DF <- data.frame(Noms = c("Pierre", "Jean", "Jacques"),
+                   Age = c(42, 34, 19),
+                   Fumeur = c(TRUE, TRUE, FALSE)))
     Noms Age Fumeur
1  Pierre  42   TRUE
2    Jean  34   TRUE
3 Jacques  19  FALSE
> mode(DF)                   # un data frame est une liste...
[1] "list"
> class(DF)                  # ... de classe 'data.frame'
[1] "data.frame"
> dim(DF)                    # dimensions implicites
[1] 3 3
> names(DF)                  # titres des colonnes
[1] "Noms"   "Age"    "Fumeur"
> row.names(DF)              # titres des lignes (implicites)
[1] "1" "2" "3"
> DF[1, ]                    # première ligne
    Noms Age Fumeur
1 Pierre  42   TRUE
> DF[, 1]                    # première colonne
[1] Pierre  Jean    Jacques
Levels: Jacques Jean Pierre
> DF$Name                    # idem, mais plus simple
NULL
>
> ## Lorsque l'on doit travailler longtemps avec les différentes
> ## colonnes d'un data frame, il est pratique de pouvoir y
> ## accéder directement sans devoir toujours indicer. La
> ## fonction 'attach' permet de rendre les colonnes
> ## individuelles visibles dans l'espace de travail. Une fois
> ## le travail terminé, 'detach' masque les colonnes.
> exists("Noms")             # variable n'existe pas
[1] FALSE
> attach(DF)                 # rendre les colonnes visibles
> exists("Noms")             # variable existe
[1] TRUE
> Noms                       # colonne accessible
[1] Pierre  Jean    Jacques
Levels: Jacques Jean Pierre
> detach(DF)                 # masquer les colonnes
> exists("Noms")             # variable n'existe plus
[1] FALSE
>
> ###
> ### INDIÇAGE
> ###
>
> ## Les opérations suivantes illustrent les différentes
> ## techniques d'indiçage d'un vecteur pour l'extraction et
> ## l'affectation, c'est-à-dire que l'on utilise à la fois la
> ## fonction '[' et la fonction '[<-'. Les mêmes techniques
> ## existent aussi pour les matrices, tableaux et listes.
> ##
> ## On crée d'abord un vecteur quelconque formé de vingt
> ## nombres aléatoires entre 1 et 100 avec répétitions
> ## possibles.
> (x <- sample(1:100, 20, replace = TRUE))
 [1] 98 29 95 55 93 51  8 24 69 61 77 40 18 16  8 98 81  3 13 16
>
> ## On ajoute des étiquettes aux éléments du vecteur à partir
> ## de la variable interne 'letters'.
> names(x) <- letters[1:20]
>
> ## On génère ensuite cinq nombres aléatoires entre 1 et 20
> ## (sans répétitions).
> (y <- sample(1:20, 5))
[1] 13  9  7 10 16
>
> ## On remplace maintenant les éléments de 'x' correspondant
> ## aux positions dans le vecteur 'y' par des données
> ## manquantes.
> x[y] <- NA
> x
 a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t
98 29 95 55 93 51 NA 24 NA NA 77 40 NA 16  8 NA 81  3 13 16
>
> ## Les cinq méthodes d'indiçage de base.
> x[1:10]                    # avec des entiers positifs
 a  b  c  d  e  f  g  h  i  j
98 29 95 55 93 51 NA 24 NA NA
> "["(x, 1:10)               # idem, avec la fonction '['
 a  b  c  d  e  f  g  h  i  j
98 29 95 55 93 51 NA 24 NA NA
> x[-(1:3)]                  # avec des entiers négatifs
 d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t
55 93 51 NA 24 NA NA 77 40 NA 16  8 NA 81  3 13 16
> x[x < 10]                  # avec un vecteur booléen
<NA> <NA> <NA> <NA>    o <NA>    r
  NA   NA   NA   NA    8   NA    3
> x[c("a", "k", "t")]        # par étiquettes
 a  k  t
98 77 16
> x[]                        # aucun indice...
 a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t
98 29 95 55 93 51 NA 24 NA NA 77 40 NA 16  8 NA 81  3 13 16
> x[numeric(0)]              # ... différent d'indice vide
named integer(0)
>
> ## Il arrive souvent de vouloir indicer spécifiquement les
> ## données manquantes d'un vecteur (pour les éliminer ou les
> ## remplacer par une autre valeur, par exemple). Pour ce
> ## faire, on utilise la fonction 'is.na' et l'indiçage par un
> ## vecteur booléen. (Note: l'opérateur '!' ci-dessous est la
> ## négation logique.)
> is.na(x)                   # positions des données manquantes
    a     b     c     d     e     f     g     h     i     j     k     l     m
FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE  TRUE
    n     o     p     q     r     s     t
FALSE FALSE  TRUE FALSE FALSE FALSE FALSE
> x[!is.na(x)]               # suppression des données manquantes
 a  b  c  d  e  f  h  k  l  n  o  q  r  s  t
98 29 95 55 93 51 24 77 40 16  8 81  3 13 16
> x[is.na(x)] <- 0; x        # remplace les NA par des 0
 a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t
98 29 95 55 93 51  0 24  0  0 77 40  0 16  8  0 81  3 13 16
> "[<-"(x, is.na(x), 0)      # idem, mais très peu usité
 a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t
98 29 95 55 93 51  0 24  0  0 77 40  0 16  8  0 81  3 13 16
>
> ## On laisse tomber les étiquettes de l'objet.
> names(x) <- NULL
>
> ## Quelques cas spéciaux d'indiçage.
> length(x)                  # un rappel
[1] 20
> x[1:25]                    # allonge le vecteur avec des NA
 [1] 98 29 95 55 93 51  0 24  0  0 77 40  0 16  8  0 81  3 13 16 NA NA NA NA NA
> x[25] <- 10; x             # remplis les trous avec des NA
 [1] 98 29 95 55 93 51  0 24  0  0 77 40  0 16  8  0 81  3 13 16 NA NA NA NA 10
> x[0]                       # n'extraie rien
numeric(0)
> x[0] <- 1; x               # n'affecte rien
 [1] 98 29 95 55 93 51  0 24  0  0 77 40  0 16  8  0 81  3 13 16 NA NA NA NA 10
> x[c(0, 1, 2)]              # le 0 est ignoré
[1] 98 29
> x[c(1, NA, 5)]             # indices NA retourne NA
[1] 98 NA 93
> x[2.6]                     # fractions tronquées vers 0
[1] 29
>
> ## On laisse tomber les 5 derniers éléments et on convertit le
> ## vecteur en une matrice 4 x 5.
> x <- x[1:20]               # ou x[-(21:25)]
> dim(x) <- c(4, 5); x       # ajouter un attribut 'dim'
     [,1] [,2] [,3] [,4] [,5]
[1,]   98   93    0    0   81
[2,]   29   51    0   16    3
[3,]   95    0   77    8   13
[4,]   55   24   40    0   16
>
> ## Dans l'indiçage des matrices et tableaux, l'indice de
> ## chaque dimension obéit aux mêmes règles que ci-dessus. On
> ## peut aussi indicer une matrice (ou un tableau) avec une
> ## matrice. Si les exemples ci-dessous ne permettent pas d'en
> ## comprendre le fonctionnement, consulter la rubrique d'aide
> ## de la fonction '[' (ou de 'Extract').
> x[1, 2]                    # élément en position (1, 2)
[1] 93
> x[1, -2]                   # 1ère rangée sans 2e colonne
[1] 98  0  0 81
> x[c(1, 3), ]               # 1ère et 3e rangées
     [,1] [,2] [,3] [,4] [,5]
[1,]   98   93    0    0   81
[2,]   95    0   77    8   13
> x[-1, ]                    # supprimer 1ère rangée
     [,1] [,2] [,3] [,4] [,5]
[1,]   29   51    0   16    3
[2,]   95    0   77    8   13
[3,]   55   24   40    0   16
> x[, -2]                    # supprimer 2e colonne
     [,1] [,2] [,3] [,4]
[1,]   98    0    0   81
[2,]   29    0   16    3
[3,]   95   77    8   13
[4,]   55   40    0   16
> x[x[, 1] > 10, ]           # lignes avec 1er élément > 10
     [,1] [,2] [,3] [,4] [,5]
[1,]   98   93    0    0   81
[2,]   29   51    0   16    3
[3,]   95    0   77    8   13
[4,]   55   24   40    0   16
> x[rbind(c(1, 1), c(2, 2))] # éléments x[1, 1] et x[2, 2]
[1] 98 51
> x[cbind(1:4, 1:4)]         # éléments x[i, i] (diagonale)
[1] 98 51 77  0
> diag(x)                    # idem et plus explicite
[1] 98 51 77  0
>