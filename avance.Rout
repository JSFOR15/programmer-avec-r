
R version 2.14.1 (2011-12-22)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-apple-darwin9.8.0/x86_64 (64-bit)

R est un logiciel libre livré sans AUCUNE GARANTIE.
Vous pouvez le redistribuer sous certaines conditions.
Tapez 'license()' ou 'licence()' pour plus de détails.

R est un projet collaboratif avec de nombreux contributeurs.
Tapez 'contributors()' pour plus d'information et
'citation()' pour la façon de le citer dans les publications.

Tapez 'demo()' pour des démonstrations, 'help()' pour l'aide
en ligne ou 'help.start()' pour obtenir l'aide au format HTML.
Tapez 'q()' pour quitter R.

> .help.ESS <- help
> options(STERM='iESS', editor='emacsclient')
> ## Emacs: -*- coding: utf-8; fill-column: 62; comment-column: 27; -*-
>
> ###
> ### FONCTION 'apply'
> ###
>
> ## Création d'une matrice et d'un tableau à trois dimensions
> ## pour les exemples.
> m <- matrix(sample(1:100, 20), nrow = 4, ncol = 5)
> a <- array(sample(1:100, 60), dim = 3:5)
>
> ## Les fonctions 'rowSums', 'colSums', 'rowMeans' et
> ## 'colMeans' sont des raccourcis pour des utilisations
> ## fréquentes de 'apply'.
> rowSums(m)                 # somme par ligne
[1] 357 183 361 162
> apply(m, 1, sum)           # idem, mais moins lisible
[1] 357 183 361 162
> colMeans(m)                # somme par colonne
[1] 56.50 64.75 63.50 45.50 35.50
> apply(m, 2, mean)          # idem, mais moins lisible
[1] 56.50 64.75 63.50 45.50 35.50
>
> ## Puisqu'il n'existe pas de fonctions comme 'rowMax' ou
> ## 'colProds', il faut utiliser 'apply'.
> apply(m, 1, max)           # maximum par ligne
[1] 93 64 96 59
> apply(m, 2, prod)          # produit par colonne
[1]  7011456 12216540 12384000  1009008   495936
>
> ## L'argument '...' de 'apply' permet de passer des arguments
> ## à la fonction FUN.
> m[sample(1:20, 5)] <- NA   # ajout de données manquantes
> apply(m, 1, var, na.rm = TRUE) # variance par ligne sans NA
[1] 733.6667 556.2500 274.3333 484.6667
>
> ## Lorsque 'apply' est utilisée sur un tableau, son résultat
> ## est de dimensions dim(X)[MARGIN], d'où le truc
> ## mnémotechnique donné dans le texte du chapitre.
> apply(a, c(2, 3), sum)     # le résultat est une matrice
     [,1] [,2] [,3] [,4] [,5]
[1,]  109  151  117  161  169
[2,]  157  233  184  169  135
[3,]  133  172  113  175  118
[4,]   96  119  169  221  138
> apply(a, 1, prod)          # le résultat est un vecteur
[1] 5.270839e+33 4.164614e+31 1.511204e+31
>
> ## L'utilisation de 'apply' avec les tableaux peut rapidement
> ## devenir confondante si l'on ne visualise pas les calculs
> ## qui sont réalisés. On reprend ici les exemples du chapitre
> ## en montrant comment l'on calculerait le premier élément de
> ## chaque utilisation de 'apply'. Au besoin, retourner à
> ## l'indiçage des tableaux au chapitre 2.
> (x <- array(sample(1:10, 80, rep = TRUE), c(3, 3, 4)))
, , 1

     [,1] [,2] [,3]
[1,]   10    2    4
[2,]    2    5    8
[3,]    8    8    8

, , 2

     [,1] [,2] [,3]
[1,]    1   10   10
[2,]    7    6    1
[3,]    7    9    4

, , 3

     [,1] [,2] [,3]
[1,]    6    7    4
[2,]    8    7    1
[3,]    2    5    4

, , 4

     [,1] [,2] [,3]
[1,]    1    3    9
[2,]   10    1    8
[3,]    9    4    9

> apply(x, 3, det)      # déterminants des quatre matrices 3 x 3
[1] -240   15   32  202
> det(x[, , 1])         # équivalent pour le premier déterminant
[1] -240
>
> apply(x, 1, sum)      # sommes des trois tranches horizontales
[1] 67 64 77
> sum(x[1, , ])         # équivalent pour la première somme
[1] 67
>
> apply(x, c(1, 2), sum) # sommes des neuf carottes horizontales
     [,1] [,2] [,3]
[1,]   18   22   27
[2,]   27   19   18
[3,]   26   26   25
> sum(x[1, 1, ])         # équivalent pour la première somme
[1] 18
>
> apply(x, c(1, 3), sum) # sommes des 12 carottes transversales
     [,1] [,2] [,3] [,4]
[1,]   16   21   17   13
[2,]   15   14   16   19
[3,]   24   20   11   22
> sum(x[1, , 1])         # équivalent pour la première somme
[1] 16
>
> apply(x, c(2, 3), sum) # sommes des 12 carottes verticales
     [,1] [,2] [,3] [,4]
[1,]   20   15   16   20
[2,]   15   25   19    8
[3,]   20   15    9   26
> sum(x[, 1, 1])         # équivalent pour la première somme
[1] 20
>
> ###
> ### FONCTIONS 'lapply' ET 'sapply'
> ###
>
> ## La fonction 'lapply' applique une fonction à tous les
> ## éléments d'une liste et retourne une liste, peu importe les
> ## dimensions des résultats. La fonction 'sapply' retourne un
> ## vecteur ou une matrice, si possible.
> ##
> ## Somme «interne» des éléments d'une liste.
> (x <- list(1:10, c(-2, 5, 6), matrix(3, 4, 5)))
[[1]]
 [1]  1  2  3  4  5  6  7  8  9 10

[[2]]
[1] -2  5  6

[[3]]
     [,1] [,2] [,3] [,4] [,5]
[1,]    3    3    3    3    3
[2,]    3    3    3    3    3
[3,]    3    3    3    3    3
[4,]    3    3    3    3    3

> sum(x)                     # erreur
Erreur dans sum(x) : 'type' (list) de l'argument incorrect
> lapply(x, sum)             # sommes internes (liste)
[[1]]
[1] 55

[[2]]
[1] 9

[[3]]
[1] 60

> sapply(x, sum)             # sommes internes (vecteur)
[1] 55  9 60
>
> ## Création de la suite 1, 1, 2, 1, 2, 3, 1, 2, 3, 4, ..., 1,
> ## 2, ..., 9, 10.
> lapply(1:10, seq)          # le résultat est une liste
[[1]]
[1] 1

[[2]]
[1] 1 2

[[3]]
[1] 1 2 3

[[4]]
[1] 1 2 3 4

[[5]]
[1] 1 2 3 4 5

[[6]]
[1] 1 2 3 4 5 6

[[7]]
[1] 1 2 3 4 5 6 7

[[8]]
[1] 1 2 3 4 5 6 7 8

[[9]]
[1] 1 2 3 4 5 6 7 8 9

[[10]]
 [1]  1  2  3  4  5  6  7  8  9 10

> unlist(lapply(1:10, seq))  # le résultat est un vecteur
 [1]  1  1  2  1  2  3  1  2  3  4  1  2  3  4  5  1  2  3  4  5  6  1  2  3  4
[26]  5  6  7  1  2  3  4  5  6  7  8  1  2  3  4  5  6  7  8  9  1  2  3  4  5
[51]  6  7  8  9 10
>
> ## Soit une fonction calculant la moyenne pondérée d'un
> ## vecteur. Cette fonction prend en argument une liste de deux
> ## éléments: 'donnees' et 'poids'.
> fun <- function(liste)
+     sum(liste$donnees * liste$poids)/sum(liste$poids)
>
> ## On peut maintenant calculer la moyenne pondérée de
> ## plusieurs ensembles de données réunis dans une liste
> ## itérée.
> (x <- list(list(donnees = 1:7,
+                 poids = (5:11)/56),
+            list(donnees = sample(1:100, 12),
+                 poids = 1:12),
+            list(donnees = c(1, 4, 0, 2, 2),
+                 poids = c(12, 3, 17, 6, 2))))
[[1]]
[[1]]$donnees
[1] 1 2 3 4 5 6 7

[[1]]$poids
[1] 0.08928571 0.10714286 0.12500000 0.14285714 0.16071429 0.17857143 0.19642857


[[2]]
[[2]]$donnees
 [1]  4 32 93 78  7  2 57 26 45  5 75 76

[[2]]$poids
 [1]  1  2  3  4  5  6  7  8  9 10 11 12


[[3]]
[[3]]$donnees
[1] 1 4 0 2 2

[[3]]$poids
[1] 12  3 17  6  2


> sapply(x, fun)             # aucune boucle explicite!
[1]  4.5000 44.9359  1.0000
>
> ###
> ### FONCTION 'mapply'
> ###
>
> ## Création de quatre échantillons aléatoires de taille 12.
> x <- lapply(rep(12, 4), sample, x = 1:100)
>
> ## Moyennes tronquées à 0, 10, 20 et 30%, respectivement, de
> ## ces quatre échantillons aléatoires.
> mapply(mean, x, 0:3/10)
[1] 43.41667 35.30000 50.75000 45.00000
>
> ###
> ### FONCTION 'replicate'
> ###
>
> ## La fonction 'replicate' va répéter un certain nombre de
> ## fois une expression quelconque. Le principal avantage de
> ## 'replicate' sur 'sapply' est qu'on n'a pas à se soucier des
> ## arguments à passer à une fonction.
> ##
> ## Par exemple, on veut simuler dix échantillons aléatoires
> ## indépendants de longueur 12. On peut utiliser 'sapply',
> ## mais la syntaxe n'est ni élégante, ni facile à lire
> ## (l'argument 'i' ne sert à rien).
> sapply(rep(1, 10), function(i) sample(1:100, 12))
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
 [1,]    1   65   40   65   69   22   47   65   30    95
 [2,]   44   52   88   42   27   64   79    3   78    81
 [3,]   35    2   80   49   40   52   55   46   37     1
 [4,]   78   90   69   46   10   44   50   57   45    97
 [5,]   45   17   52   21   52   56   19   36   74    96
 [6,]   75   24   95   54   36   81   70   82   39    98
 [7,]   10   80   83    5   23   37   38   42   34    92
 [8,]   95   47   38   89    3   67   20   77   42    56
 [9,]   22   21    5   61   90   50   29   76   59    72
[10,]   48   92   56   83   72   84   37   10   15    33
[11,]   29   72   87   20   99   57   16   21   85    66
[12,]    5   34   94   52   45   98   57   16   23     3
>
> ## En utilisant 'replicate', on sait tout de suite de quoi il
> ## s'agit. À noter que les échantillons se trouvent dans les
> ## colonnes de la matrice résultante.
> replicate(10, sample(1:100, 12))
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
 [1,]    9   30   45    5   34   63    1   55   84    26
 [2,]   60   94   89   93   27   49   30   24   53    79
 [3,]    2   97   18   81   32   52   77   37   18    88
 [4,]   55   61   74   54    3   59   14   74   93    86
 [5,]   86   92   73    8   80   37   88    6    4    55
 [6,]   18   56   10   31   69   44   59   54   98    30
 [7,]   83   60   42   97   14  100   87    3   54     5
 [8,]   50   69   91   20   81    9   80   99   12    73
 [9,]   49   93   29   58  100   55   45   73   52    32
[10,]   71   29   71   46   17   24   60   91   48    42
[11,]   69   52   97   57   43   80   11   62   46    69
[12,]   19   24    3   87   30   73   28   75   33     6
>
> ## Vérification que la moyenne arithmétique (bar{X}) est un
> ## estimateur sans biais de la moyenne de la loi normale. On
> ## doit calculer la moyenne de plusieurs échantillons
> ## aléatoires, puis la moyenne de toutes ces moyennes.
> ##
> ## On définit d'abord une fonction pour faire une simulation.
> ## Remarquer que dans la fonction ci-dessous, 'mean' est tour
> ## à tour le nom d'un argument (qui pourrait aussi bien être
> ## «toto») et la fonction pour calculer une moyenne.
> fun <- function(n, mean, sd)
+     mean(rnorm(n, mean = mean, sd = sd))
>
> ## Avec 'replicate', on fait un grand nombre de simulations.
> x <- replicate(10000, fun(100, 0, 1)) # 10000 simulations
> hist(x)                    # distribution de bar{X}
> mean(x)                    # moyenne de bar{X}
[1] -0.001994505
>
> ###
> ### CLASSES ET FONCTIONS GÉNÉRIQUES
> ###
>
> ## Pour illustrer les classes et fonctions génériques, on
> ## reprend la fonction de point fixe 'fp3' des exemples du
> ## chapitre 5 en y faisant deux modifications:
> ##
> ##   1. ajout d'un compteur pour le nombre d'itérations;
> ##   2. la fonction retourne une liste de classe 'fp'
> ##      contenant diverses informations relatives à la
> ##      procédure de point fixe.
> ##
> ## Ainsi, la fonction 'fp4' retourne un objet qui peut ensuite
> ## être manipulé par des méthodes de fonctions génériques.
> ## C'est l'approche de programmation objet favorisée dans le
> ## langage R.
> fp4 <- function(FUN, start, echo = FALSE, TOL = 1E-10)
+ {
+     x <- start             # valeur de départ
+     i <- 0                 # compteur des itérations
+
+     if (echo)
+         expr <- expression(print(xt <- x))
+     else
+         expr <- expression(xt <- x)
+
+     repeat
+     {
+         eval(expr)
+
+         x <- FUN(xt)       # nouvelle valeur
+         i <- i + 1         # incrémenter le compteur
+
+         if (abs(x - xt)/xt < TOL)
+             break
+     }
+
+     structure(list(fixed.point = x, # point fixe
+                    nb.iter = i,     # nombre d'itérations
+                    fun = FUN,       # fonction f(x)
+                    x0 = start,      # valeur de départ
+                    TOL = TOL),      # précision relative
+               class = "fp")
+ }
>
> ## On crée maintenant des méthodes pour la classe 'fp' pour
> ## les fonctions génériques les plus courantes, soit 'print',
> ## 'summary' et 'plot'.
> ##
> ## La méthode de 'print' sera utilisée pour afficher seulement
> ## la valeur du point fixe. C'est en quelque sorte
> ## l'utilisation la plus simple de la fonction 'fp4'.
> ##
> ## La méthode de 'summary' fournira un peu plus d'informations
> ## sur la procédure de point fixe.
> ##
> ## Enfin, la méthode de 'plot' fera un graphique de la
> ## fonction f(x) et son intersection avec la droite y = x.
> print.fp <- function(x)
+     print(x$fixed.point)
>
> summary.fp <- function(x)
+ {
+     if (class(x) != "fp")
+         stop("object is not of class 'fp'")
+     cat("Function:\n ")
+     print(x$fun)
+     cat("\n")
+     cat("Fixed point:\n ", x$fixed.point, fill = TRUE)
+     cat("\n")
+     cat("Number of iterations:\n ", x$nb.iter, fill = TRUE)
+     cat("\n")
+     cat("Precision:\n ", x$TOL, fill = TRUE)
+ }
>
> plot.fp <- function(x, ...)
+ {
+     ## Valeur du point fixe
+     fp <- x$fixed.point
+
+     ## Il faut déterminer un intervalle pour lequel tracer la
+     ## fonction. Celui-ci est déterminé de façon arbitraire
+     ## comme un multiple de la distance entre la valeur de
+     ## départ et la valeur du point fixe.
+     r <- abs(x$x0 - fp)
+
+     ## Fonction à tracer
+     FUN <- x$fun
+
+     ## Fonction y = x. 'FUN2' est nécessaire parce que 'curve'
+     ## n'admet pas de fonctions anonymes en argument.
+     FUN2 <- function(x) x
+
+     ## Graphique de la fonction 'FUN'
+     curve(FUN, from = fp - 3 * r, to = fp + 3 * r,
+           xlab = "x", ylab = "f(x)", lwd = 2)
+
+     ## Ajout de la droite 'FUN2' au graphique
+     curve(FUN2, add = TRUE, lwd = 1)
+
+     ## Ajout d'un point sur le point fixe
+     points(fp, FUN(fp), ...)
+ }
>
> ## Exemples d'utilisation
> x <- fp4(function(x) 3^(-x), start = 0.5)
> x                          # affichage de 'print.fp'
[1] 0.5478086
> summary(x)                 # plus d'information
Function:
 function(x) 3^(-x)

Fixed point:
  0.5478086

Number of iterations:
  43

Precision:
  1e-10
> plot(x)                    # graphique de base
> plot(x, pch = 21,          # graphique plus élaboré...
+      bg = "orange",        # ... consulter la rubrique
+      cex = 2, lwd = 2)     # ... d'aide de 'par'
>
> ###
> ### OPÉRATEURS EN TANT QUE FONCTIONS
> ###
>
> ## Les opérateurs représentés par des caractères spéciaux sont
> ## des fonctions comme les autres. On peut donc les appeler
> ## comme toute autre fonction. (En fait, l'interprète R fait
> ## cette traduction à l'interne.)
> x <- sample(1:100, 12)     # un vecteur
> x + 2                      # appel usuel
 [1]  94  39  10   4  55  71 102  41  81  17  78  70
> "+"(x, 2)                  # équivalent
 [1]  94  39  10   4  55  71 102  41  81  17  78  70
> x[c(3, 5)]                 # extraction usuelle
[1]  8 53
> "["(x, c(3, 5))            # équivalent
[1]  8 53
> x[1] <- 0; x               # assignation usuelle
 [1]   0  37   8   2  53  69 100  39  79  15  76  68
> "[<-"(x, 2, 0)             # équivalent (à x[2] <- 0)
 [1]   0   0   8   2  53  69 100  39  79  15  76  68
>
> ## D'une part, cela explique pourquoi il faut placer les
> ## opérateurs entre guillemets (" ") lorsqu'on les utilise
> ## dans les fonctions comme 'outer', 'lapply', etc.
> outer(x, x, +)             # erreur de syntaxe
Erreur : ')' inattendu(e) dans "outer(x, x, +)"
> outer(x, x, "+")           # correct
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12]
 [1,]    0    0    8    2   53   69  100   39   79    15    76    68
 [2,]    0    0    8    2   53   69  100   39   79    15    76    68
 [3,]    8    8   16   10   61   77  108   47   87    23    84    76
 [4,]    2    2   10    4   55   71  102   41   81    17    78    70
 [5,]   53   53   61   55  106  122  153   92  132    68   129   121
 [6,]   69   69   77   71  122  138  169  108  148    84   145   137
 [7,]  100  100  108  102  153  169  200  139  179   115   176   168
 [8,]   39   39   47   41   92  108  139   78  118    54   115   107
 [9,]   79   79   87   81  132  148  179  118  158    94   155   147
[10,]   15   15   23   17   68   84  115   54   94    30    91    83
[11,]   76   76   84   78  129  145  176  115  155    91   152   144
[12,]   68   68   76   70  121  137  168  107  147    83   144   136
>
> ## D'autre part, cela permet d'utiliser les opérateurs
> ## d'extraction "[" et "[[" dans de telles fonctions. Par
> ## exemple, voici comment extraire le deuxième élément de
> ## chaque élément d'une liste.
> (x <- list(1:4, 8:2, 6:12, -2:2)) # liste quelconque
[[1]]
[1] 1 2 3 4

[[2]]
[1] 8 7 6 5 4 3 2

[[3]]
[1]  6  7  8  9 10 11 12

[[4]]
[1] -2 -1  0  1  2

> x[[1]][2]                  # 2e élément du 1er élément
[1] 2
> x[[2]][2]                  # 2e élément du 2e élément
[1] 7
> x[[3]][2]                  # 2e élément du 3e élément
[1] 7
> x[[4]][2]                  # 2e élément du 4e élément
[1] -1
> lapply(x, "[", 2)          # même chose en une ligne
[[1]]
[1] 2

[[2]]
[1] 7

[[3]]
[1] 7

[[4]]
[1] -1

> sapply(x, "[", 2)          # résultat sous forme de vecteur
[1]  2  7  7 -1
>
> ###
> ### COMMENT JOUER DES TOURS AVEC R
> ###
>
> ## Redéfinir un opérateur dans l'espace de travail de
> ## quelqu'un...
> "+" <- function(x, y) x * y # redéfinition de "+"
> 5 + 2                      # ouch!
[1] 10
> ls()                       # traîtrise dévoilée...
[1] "+"          "a"          "fp4"        "fun"        "m"
[6] "plot.fp"    "print.fp"   "summary.fp" "x"
> rm("+")                    # ... puis éliminée
> 5 + 2                      # c'est mieux
[1] 7
>
> ## Faire croire qu'une fonction fait autre chose que ce
> ## qu'elle fait en réalité. Si l'attribut "source" d'une
> ## fonction existe, c'est son contenu qui est affiché lorsque
> ## l'on examine une fonction.
> f <- function(x, y) x + y  # vraie fonction
> attr(f, "source") <- "function(x, y) x * y" # ce qui est affiché
> f                          # une fonction pour faire le produit?
function(x, y) x + y
> f(2, 3)                    # non!
[1] 5
> str(f)                     # structure de l'objet
function (x, y)
 - attr(*, "srcref")=Class 'srcref'  atomic [1:8] 1 6 1 25 6 25 1 1
  .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x100a55e70>
 - attr(*, "source")= chr "function(x, y) x * y"
> attr(f, "source") <- NULL  # attribut "source" effacé
> f                          # c'est mieux
function(x, y) x + y
>
> ## Redéfinir la méthode de 'print' pour une classe d'objet...
> ## Ici, l'affichage d'un objet de classe "lm" cause la
> ## fermeture de R!
> print.lm <- function(x) q("ask")
>
> x <- rnorm(10)             # échantillon aléatoire
> y <- x + 2 + rnorm(10)     # modèle de régression linéaire
> lm(y ~ x)                  # répondre "c"!
Save workspace image? [y/n/c]: c
>