\chapter{Bases du langage R}
\label{chap:bases}

<<echo=FALSE>>=
options(width=52)
@

\begin{objectifs}
\item Écrire et interpréter la syntaxe et la sémantique du langage R.
\item Utiliser l'arithmétique vectorielle du langage R dans les
  calculs.
\item Créer et manipuler des vecteurs simples («atomiques»).
\item Utiliser les divers modes des vecteurs (en particulier
  \code{numeric}, \code{character} et \code{logical}) et la conversion
  automatique de l'un à l'autre.
\item Extraire des données d'un vecteur simple ou y affecter de
  nouvelles valeurs à l'aide des méthodes d'indiçage.
\item Appeler une fonction R; concevoir comment les arguments sont
  passés à la fonction et le traitement des valeurs par défaut.
\item Définir une fonction R, ses divers arguments et, le cas échéant,
  les valeurs par défaut de ceux-ci.
\item Utiliser et définir des fonctions R ayant un nombre variable
  d'arguments.
\end{objectifs}

C'est dans ce chapitre que nous débutons réellement l'apprentissage de
la programmation. Avouons-le d'entrée de jeu: notre présentation a
fortement été influencée par l'ouvrage magistral de
\cite{Sussman:scheme:1996}.

Les humains créent des programmes informatiques pour contrôler, à
l'aide d'un ensemble de règles, les processus de calcul et de
manipulation de données d'un ordinateur. Ces programmes sont rédigés
dans un langage de programmation.

Un langage est toutefois plus qu'une simple manière de transmettre des
instructions à un ordinateur, c'est aussi une façon de conceptualiser
les procédures que l'ordinateur devra effectuer. Autrement dit, le
type de langage de programmation que nous utilisons influence
directement la solution que nous proposerons à un problème --- et vice
versa. Comme nous l'avons déjà fait à la
\autoref{sec:informatique:semantique}, dressons un parallèle avec les
langues parlées et écrites: une langue ne constitue pas seulement un
moyen de transmettre une idée, mais bien une façon de concevoir le
monde. Ce n'est pas pour rien qu'il est parfois impossible de faire
passer une idée d'une langue vers une autre --- ce que l'on appelle
couramment une «expression intraduisible».

Le langage de programmation étudié ici est le R. Sa syntaxe, celle du
langage \index{S}S, s'apparente au \index{C}C. En revanche, la
sémantique de R s'inspire du paradigme de la programmation
fonctionnelle (\autoref{sec:informatique:paradigmes}), ce qui lui
confère de plus grandes affinités avec le \index{Lisp}Lisp et
\index{APL}l'APL.

Ce chapitre introduit des notions de base du langage R telles que
l'expression, l'affectation, et l'objet. Le concept de vecteur se
trouvant au cœur du langage, nous faisons une large place à la
création et à la manipulation des vecteurs. Le chapitre se termine par
la définition de fonctions.


\section{Données et procédures fondamentales}
\label{sec:bases:donnees}

À sa plus simple expression, la programmation est un exercice de
manipulation de \emph{données} à l'aide de \emph{procédures}. Un
langage de programmation fournit au programmeur des données et des
procédures fondamentales (ou \emph{génériques}), des manières de les
combiner pour former des éléments complexes, ainsi qu'un mécanisme
d'abstraction permettant de nommer et de manipuler ces éléments
complexes.

Les données fondamentales de R sont les suivantes:
\begin{itemize}
\item nombres réels: \code{0, 1, 2, 78.42, -1.39}, \dots;
\item chaines de caractères: \code{"a"}, \code{"abc"}, \dots;
\item valeurs booléennes: \Objet{TRUE}, \Objet{FALSE};
\item donnée manquante: \Objet{NA};
\item infini positif et négatif: \Objet{Inf}, \code{-Inf};
\item valeur indéterminée: \Objet{NaN};
\item «néant»: \Objet{NULL};
\item nombres complexes: \code{1 + 2i}.
\end{itemize}
La grande majorité des langages de programmation offrent les deux
premiers type de données ci-dessus. Les autres types se revèlent très
utiles pour la programmation mathématique et l'analyse de données.
Nous reviendrons sur leurs caractéristiques à la
\autoref{sec:bases:objets}.

Quant aux procédures fondamentales, nous pourrions les classer en
quatre grandes catégories:
\begin{itemize}
\item arithmétique: \verb|+ - * / ^ < >= ==|, etc.;
\item logique: \verb=& | !=\,;
\item indiçage: \verb=[ ] $=\,;
\item affectation: \verb|<-|\,.
\end{itemize}
Les opérations arithmétiques sont applicables aux nombres réels ou
complexes, alors que les opérations logiques ne sont applicables
qu'aux valeurs booléennes. Nous traitons de l'opération d'affectation
en détail à la section suivante.

Le \autoref{tab:bases:operateurs} présente les opérateurs les plus
fréquemment employés en ordre décroissant de priorité des opérations.
Ils sont accompagnés d'une description succincte. Nous reviendrons sur
certains opérateurs dans les chapitres subséquents.

\begin{table}
  \centering
  \renewcommand{\arraystretch}{1.1}
  \begin{tabular}{lp{8cm}}
    \toprule
    Opérateur     & Fonction \\
    \midrule
    \Fonction{\$} & extraction \\
    \Fonction{[}\, \fonction{[[} & indiçage \\
    \verb|^|\index{\string^@\verb=^=|bfhyperpage} & puissance \\
    \Fonction{-}  & changement de signe \\
    {\NoAutoSpacing\verb|:|}\index{:@\NoAutoSpacing\verb=:=}  & génération de suites \\
    \Fonction{\%*\%}\, \Fonction{\%\%}\, \Fonction{\%/\%} & produit
    matriciel, modulo, division entière \\
    \Fonction{*}\, \Fonction{/} & multiplication, division \\
    \Fonction{+}\, \Fonction{-} & addition, soustraction \\
    \Fonction{<}\, \Fonction{<=}\, \Fonction{==}\, \Fonction{>=}\,
    \Fonction{>}\, \verb|!=|\Index{"!=@\code{"!=}} & plus petit, plus petit ou égal, égal,
    plus grand ou égal, plus grand, différent de \\
    \verb=!=\Index{"!@\code{"!}}  & négation logique \\
    \Fonction{\&}\, \Fonction{\&\&} & «et» logique \\
    \code{\textbar}\Index{{"|}@\code{\textbar}},
    \code{\textbar\textbar}\Index{{"|"|}@\code{\textbar\textbar}}    & «ou» logique \\
    \fonction{->}\, \verb|->>|\index{->>@\verb=->>=|bfhyperpage} & affectation \\
    \fonction{<-}\, \verb|<<-|\index{<<-@\verb=<<-=|bfhyperpage} & affectation \\
    \bottomrule
  \end{tabular}
  \caption{Principaux opérateurs du langage R, en ordre décroissant
    de priorité}
  \label{tab:bases:operateurs}
\end{table}

\tipbox{Il est utile, voire essentiel de connaître le niveau de
  priorité des opérateurs dans les expressions R.}


\section{Commandes R}
\label{sec:bases:commandes}

L'utilisateur de R interagit avec l'interpréteur R en entrant des
commandes à la ligne de commande. Toute commande R est soit une
\emph{expression}\index{expression}, soit une
\emph{affectation}\index{affectation}.

Une expression est immédiatement évaluée et le résultat est affiché
sous l'invite de commande. Le symbole d'une donnée fondamentale
représente cette donnée, comme on pourrait s'y attendre. L'invite de
commande de R est le symbole \verb*|> |.
<<echo=TRUE>>=
42
3 + 2i
2 + 3
pi
cos(pi/4)
@
Lorsqu'une commande n'est pas syntaxiquement complète, l'invite de
commande devient \verb*|+ | pour nous inciter à compléter la
commande.
<<echo=TRUE>>=
2 *
3
@

Lors d'une affectation, une expression est évaluée, mais le résultat
est stocké dans un \emph{objet} (ou \emph{variable}) dans l'espace de
travail et rien n'est affiché à l'écran. Tel que mentionné
précédemment, le symbole d'affectation est \Fonction{<-}, c'est-à-dire
les deux caractères \verb|<| et \verb|-| placés obligatoirement l'un à
la suite de l'autre.
<<echo=TRUE>>=
a <- 5
a
b <- a
b
@
Pour affecter le résultat d'un calcul dans un objet et simultanément
afficher ce résultat, il suffit de placer l'affectation entre
parenthèses pour ainsi créer une nouvelle expression\footnote{%
  En fait, cela devient un appel à l'opérateur \code{"("} qui ne fait
  que retourner son argument.}.
<<echo=TRUE>>=
(a <- 2 + 3)
@

Le symbole d'affectation inversé \fonction{->} existe aussi, mais il
est rarement utilisé.

\cautionbox{Évitez d'utiliser l'opérateur \,\fonction{=}\, pour
  affecter une valeur à une variable. Cette pratique est susceptible
  d'engendrer de la confusion avec les constructions \code{nom =
    valeur} dans les appels de fonction. Les règles de syntaxe de R
  commandent d'utiliser l'opérateur \code{<-} pour l'affectation,
  point.}

Que ce soit dans les fichiers de script ou à la ligne de commande, on
sépare les commandes R les unes des autres par un
\index{;@\code{;}}point-virgule ou par un retour à la ligne. On
considère généralement comme du mauvais style d'employer les deux,
c'est-à-dire de placer des points-virgules à la fin de chaque ligne de
code, surtout dans les fichiers de script. Le point-virgule peut être
utile pour séparer deux courtes expressions ou plus sur une même
ligne. C'est le seul emploi que nous faisons du point-virgule.
<<echo=TRUE>>=
a <- 5; a + 2
@

On peut regrouper plusieurs commandes en une seule expression en les
entourant d'accolades \Fonction{\{~\}}. Le résultat du regroupement
est la valeur de la \emph{dernière} commande. Par conséquent, si le
regroupement se termine par une affectation, aucune valeur n'est
retournée ni affichée à l'écran.
<<echo=TRUE>>=
{
    a <- 2 + 3
    b <- a
    b
}
@
<<echo=TRUE>>=
{
    a <- 2 + 3
    b <- a
}
@


\section{Objets R}
\label{sec:bases:objets}

Tout dans le langage R est un objet: les variables contenant des
données, les fonctions, les opérateurs, même le symbole représentant
le nom d'un objet est lui-même un objet. Les objets possèdent au
minimum un \emph{mode} et une \emph{longueur} et certains peuvent
être dotés d'un ou de plusieurs \emph{attributs}.

\subsection{Règles pour les noms d'objets}
\label{sec:bases:objets:noms}

Les caractères permis pour les noms d'objets sont les lettres
minuscules a--z et majuscules A--Z, les chiffres 0--9, le point «.» et
le caractère de soulignement «\_». Selon l'environnement linguistique
de l'ordinateur, il peut être permis d'utiliser des lettres accentuées
dans les noms d'objet, mais nous recommandons fortement d'éviter cette
pratique qui nuit à la portabilité du code. Le nom d'un objet ne peut
débuter par un chiffre. Si le nom débute par un point, alors le second
caractère ne peut être un chiffre.

\warningbox{R est sensible à la casse, ce qui signifie que \code{foo},
  \code{Foo} et \code{FOO} sont trois objets distincts.}

Certains noms sont utilisés par le système R, aussi vaut-il mieux
éviter de les utiliser comme nom de variable ou de fonction. En
particulier, évitez:
\begin{quote}
  \code{c}, \code{q}, \code{t}, \code{C}, \code{D},
  \code{I}, \code{diff}, \code{length}, \code{mean},
  \code{pi}, \code{range}, \code{var}.
\end{quote}
De plus, certains mots sont réservés et il est interdit de les
utiliser comme nom d'objet. Les mots réservés pour le système sont:
\begin{quote}
  \code{break}, \code{else}, \code{for}, \code{function}, \code{if},
  \code{in}, \code{next}, \code{repeat}, \code{return}, \code{while}, \\
  \code{TRUE}, \code{FALSE}, \\
  \code{Inf}, \code{NA}, \code{NaN}, \code{NULL}, \\
  \verb|NA_integer_|, \verb|NA_real_|, \verb|NA_complex_|,
  \verb|NA_character_|, \\
  \code{...}, \code{..1}, \code{..2}, etc.
\end{quote}
Oui, `\code{...}' (\emph{point-point-point}) est véritablement un nom
d'objet dans R! Son usage est expliqué à la \autoref{avance:dots}.

Les variables \code{T}\index{T@\code{T}|see{\code{TRUE}}} et
\code{F}\index{F@\code{F}|see{\code{FALSE}}} prennent par défaut les
valeurs \objet{TRUE} et \objet{FALSE}, respectivement, mais peuvent
être réaffectées.
<<echo=TRUE>>=
T
F
@
\begin{Schunk}
\begin{Sinput}
> TRUE <- 3
\end{Sinput}
\begin{Soutput}
Error in TRUE <- 3 : membre gauche de l'assignation
(do_set) incorrect
\end{Soutput}
\end{Schunk}
<<echo=TRUE>>=
(T <- 3)
@
<<echo=FALSE>>=
rm(T)
@

\tipbox{Nous recommandons de toujours écrire les valeurs booléennes
  \code{TRUE} et \code{FALSE} au long pour éviter des bogues
  difficiles à détecter.}


\subsection{Modes et types de données}
\label{sec:bases:objets:mode}

Le mode\Index{mode} prescrit ce qu'un objet peut contenir. À ce titre,
un objet ne peut avoir qu'un seul mode. Le \autoref{tab:bases:modes}
contient la liste des principaux modes disponibles en R. À chacun de
ces modes correspond une fonction du même nom servant à créer un objet
de ce mode. Le mode d'un objet est obtenu avec la fonction
\Fonction{mode}.
<<echo=TRUE>>=
v <- c(1, 2, 5, 9)
mode(v)
@

\begin{table}
  \centering
  \begin{tabular}{ll}
    \toprule
    Mode              & Contenu de l'objet \\
    \midrule
    \Mode{numeric}    & nombres réels \\
    \Mode{complex}    & nombres complexes \\
    \Mode{logical}    & valeurs booléennes \\
    \Mode{character}  & chaines de caractères \\
    \Mode{function}   & fonction \\
    \Mode{list}       & liste \\
    \Mode{expression} & expressions non évaluées \\
    \bottomrule
  \end{tabular}
  \caption{Modes disponibles et contenus correspondants}
  \label{tab:bases:modes}
\end{table}

Les objets de mode \code{"numeric"}, \code{"complex"},
\code{"logical"} et \code{"character"} sont des objets \emph{simples}
(\emph{atomic}) qui contiennent des données d'un seul type. En
revanche, les objets de mode \code{"list"} ou \code{"expression"} sont
des objets \emph{récursifs} qui peuvent contenir d'autres objets. Par
exemple, une liste peut contenir une ou plusieurs autres listes; nous
y reviendrons au \autoref{chap:donnees}.

\tipbox{La fonction \Fonction{typeof} permet d'obtenir une description
  plus précise de la représentation interne d'un objet (c'est-à-dire
  au niveau de la mise en {\oe}uvre en C). Le mode et le type d'un
  objet sont souvent identiques.}


\subsection{Longueur}
\label{sec:bases:objets:longueur}

La longueur\Index{longueur} d'un objet est égale au nombre d'éléments
qu'il contient. La longueur d'un objet est obtenue avec la fonction
\Fonction{length}.
<<echo=TRUE>>=
v <- c(1, 2, 5, 9)
length(v)
@

\tipbox{Il est permis --- et parfois utile --- de créer un objet de
  longueur nulle, c'est-à-dire un objet qui existe, mais qui est
  vide.}

La longueur, au sens R du terme, d'une chaine de caractères est
toujours $1$. Un objet de mode \code{character} doit contenir
plusieurs chaines de caractères pour que sa longueur soit supérieure à
$1$. Il faut utiliser la fonction \Fonction{nchar} pour obtenir le
nombre de caractères dans une chaine.
<<echo=TRUE>>=
v1 <- "actuariat"
length(v1)
nchar(v1)
@
<<echo=TRUE>>=
v2 <- c("a", "c", "t", "u", "a", "r", "i", "a", "t")
length(v2)
nchar(v2)
@

\subsection{Valeurs spéciales}
\label{sec:bases:objets:NA_et_al}

Les objets valeur manquante (\code{NA}), infini (\code{Inf},
\code{-Inf}), valeur indéterminée (\code{NaN}) et néant (\code{NULL})
permettent de représenter de manière intuitive des quantitées souvent
utilisées dans les applications statistiques et en analyse de données.
Pour pleinement tirer profit de ces objets, il faut connaitre leurs
caractéristiques spéciales.

L'objet \code{NA} sert à représenter une donnée manquante. Chose un
peu surprenante, c'est un objet de mode \mode{logical}. Cependant,
\code{NA} ne peut être considéré ni \code{TRUE}, ni \code{FALSE}.
<<echo=TRUE>>=
mode(NA)
length(NA)
NA == TRUE
NA == FALSE
@
Toute opération, y compris la comparaison, impliquant la valeur
\code{NA} a comme résultat \code{NA}. Par conséquent, la valeur
\code{NA} n'est égale à aucune autre, pas même elle-même! Pour tester
si une valeur est manquante, il faut avoir recours à la fonction
\Fonction{is.na}.
<<echo=TRUE>>=
x <- NA
x == NA
is.na(NA)
@

Les objets \code{Inf}, \code{-Inf} et \code{NaN} permettent de
représenter les valeurs mathématiques spéciales prévues dans la norme
IEEE~754 régissant la représentation interne des nombres dans un
ordinateur \citep{IEEE:754}. De manière intuitive, l'objet \objet{Inf}
représente $+\infty$, \objet{-Inf} représente $-\infty$ et \Objet{NaN}
(\emph{Not a Number}) représente une forme indéterminée du type
$\frac{0}{0}$ ou $\infty - \infty$. Les fonctions
\Fonction{is.infinite}, \Fonction{is.finite} et \Fonction{is.nan}
fournissent des manières robuste de tester ces valeurs.
<<echo=TRUE>>=
is.infinite(1/0)
is.finite(-1/0)
is.nan(0/0)
is.nan(Inf - Inf)
@

Enfin, l'objet spécial \objet{NULL} représente «rien», ou le vide. Son
mode est \Mode{NULL} et sa longueur est $0$. Il est toutefois
différent d'un objet vide: un objet de longueur $0$ est un contenant
vide, alors que \code{NULL} est «pas de contenant».
<<echo=TRUE>>=
mode(NULL)
length(NULL)
1 + NULL
@
Toute opération avec \code{NULL} retourne un objet de longueur
nulle (et du mode approprié), y compris la comparaison. Par
conséquent, la seule façon de tester si un objet est \code{NULL} est
avec la fonction \Fonction{is.null}.
<<echo=TRUE>>=
x <- NULL
x == NULL
is.null(NULL)
@


\subsection{Attributs}
\label{bases:objets:attributs}

Les attributs\Index{attribut} d'un objet sont des éléments
d'information additionnels attachées à cet objet. Le
\autoref{tab:attributs} fournit la liste des attributs les plus
fréquemment utilisés. À chacun correspond une fonction du même nom
servant à extraire l'attribut d'un objet.

\begin{table}
  \centering
  \begin{tabular}{ll}
    \toprule
    Attribut            & Utilisation \\
    \midrule
    \Attribut{class}    &
    affecte le comportement d'un objet \\
    \Attribut{dim}      &
    dimensions\index{dimension} des matrices et tableaux \\
    \Attribut{dimnames} &
    étiquettes\index{etiquette@étiquette} des dimensions des matrices
    et tableaux \\
    \Attribut{names}    &
    étiquettes des éléments d'un objet \\
    \bottomrule
  \end{tabular}
  \caption{Attributs les plus usuels d'un objet}
  \label{tab:attributs}
\end{table}

La fonction \Fonction{attributes} permet d'extraire ou de modifier la
liste des attributs d'un objet, alors que la fonction \Fonction{attr}
permet de travailler sur un seul attribut à la fois. Les programmeurs
peuvent ajouter à peu près n'importe quoi à la liste des attributs
d'un objet. Par exemple, nous pourrions vouloir attacher au résultat
d'un calcul la méthode de calcul utilisée.
<<echo=TRUE>>=
x <- 3
attr(x, "methode") <- "au pif"
attributes(x)
@

L'extraction d'un attribut qui n'existe pas retourne \objet{NULL},
alors qu'à l'inverse, affecter à un attribut la valeur \code{NULL}
efface cet attribut.
<<echo=TRUE>>=
attributes(x)
dim(x)
attr(x, "methode") <- NULL
attributes(x)
@



\section{Vecteurs}
\label{bases:vecteurs}

En R, à toutes fins pratiques, \emph{tout} est un
vecteur\index{vecteur}. Contrairement à certains autres langages de
programmation, il n'y a pas de notion de scalaire en R; un scalaire
est simplement un vecteur de longueur $1$. Comme nous le verrons au
\autoref{operateurs}, le vecteur est l'unité de base dans les
calculs.

\begin{itemize}
\item Dans un vecteur simple, tous les éléments doivent être du même
  mode. Nous nous restreignons à ce type de vecteurs pour le moment.
\item Les fonctions de base pour créer des vecteurs sont:
  \begin{itemize}
  \item \Fonction{c} (concaténation);
  \item \Fonction{numeric} (vecteur de mode \mode{numeric});
  \item \Fonction{logical} (vecteur de mode \mode{logical});
  \item \Fonction{character} (vecteur de mode \mode{character}).
  \end{itemize}
\item Il est possible (et souvent souhaitable) de donner une étiquette
  à chacun des éléments d'un vecteur.
<<echo=TRUE>>=
(v <- c(a = 1, b = 2, c = 5))
v <- c(1, 2, 5)
names(v) <- c("a", "b", "c")
v
@
  Ces étiquettes font alors partie des attributs du vecteur.
\item L'indiçage dans un vecteur se fait avec les crochets
  \fonction{[~]}. On peut extraire un élément d'un vecteur par sa
  position ou par son étiquette, si elle existe (auquel cas cette
  approche est beaucoup plus sure).
<<echo=TRUE>>=
v[3]
v["c"]
@
  La \autoref{bases:indicage} traite plus en détail de l'indiçage des
  vecteurs et des matrices.
\end{itemize}

\begin{prob-astuce}
  Dans un vecteur simple, tous les éléments doivent être du même mode.
  Or, les informations du classement de la ligue comportent à la fois
  des chaines de caractères et des nombres. De plus, le classement se
  présente sous forme d'un tableau à deux dimensions, alors qu'un
  vecteur n'en compte qu'une seule. Le vecteur simple n'est donc pas
  le type d'objet approprié pour stocker le classement de la ligue.
\end{prob-astuce}

\section{Matrices et tableaux}
\label{bases:matrices}

Le R étant un langage spécialisé pour les calculs mathématiques, il
supporte tout naturellement et de manière intuitive --- à une
exception près, comme nous le verrons --- les matrices et, plus
généralement, les tableaux à plusieurs dimensions.

Les \capsule{https://youtu.be/indicage}{matrices et tableaux} ne sont
rien d'autre que des vecteurs dotés d'un attribut \attribut{dim}. Ces
objets sont donc stockés, et peuvent être manipulés, exactement comme
des vecteurs simples.

\begin{itemize}
\item Une matrice est un vecteur avec un attribut \attribut{dim} de
  longueur $2$. Cela change implicitement la classe de l'objet pour
  \indexclasse{matrix}\code{"matrix"} et, de ce fait, le mode
  d'affichage de l'objet ainsi que son interaction avec plusieurs
  opérateurs et fonctions.
\item La fonction de base pour créer des matrices est
  \Fonction{matrix}:
<<echo=TRUE>>=
matrix(1:6, nrow = 2, ncol = 3)
matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE)
@
\item La généralisation d'une matrice à plus de deux dimensions est un
  tableau (\emph{array}). Le nombre de dimensions du tableau est
  toujours égal à la longueur de l'attribut \attribut{dim}. La classe
  implicite d'un tableau est \indexclasse{array}\code{"array"}.
\item La fonction de base pour créer des tableaux est
  \Fonction{array}:
<<echo=TRUE>>=
array(1:24, dim = c(3, 4, 2))
@
\end{itemize}

\begin{important}
  On remarquera ci-dessus que les matrices et tableaux sont remplis en
  faisant d'abord varier la première dimension, puis la seconde, etc.
  Pour les matrices, cela revient à remplir par colonne. On conviendra
  que cette convention, héritée du Fortran, n'est pas des plus
  intuitives.

  La fonction \code{matrix} a un argument \argument{byrow} qui permet
  d'inverser l'ordre de remplissage. Cependant, il vaut mieux
  s'habituer à la convention de R que d'essayer constamment de la
  contourner.
\end{important}

L'ordre de remplissage inhabituel des tableaux rend leur manipulation
difficile si on ne les visualise pas correctement. Imaginons un
tableau de dimensions $3 \times 4 \times 5$.
\begin{itemize}
\item Il faut voir le tableau comme cinq matrices $3 \times 4$
  (remplies par colonne!) les unes \emph{derrière} les autres.
\item Autrement dit, le tableau est un prisme rectangulaire haut de $3$
  unités, large de $4$ et profond de $5$.
\item Si l'on ajoute une quatrième dimension, cela revient à aligner
  des prismes les uns derrière les autres, et ainsi de suite.
\end{itemize}
La \autoref{fig:bases:tableaux} fournit une représentation schématique
des tableaux à trois et quatre dimensions.

\begin{figure}[t]
  \centering
  \hspace*{\fill}
  \begin{minipage}[b]{0.4\linewidth}
    \setlength{\unitlength}{5mm}
    \begin{picture}(9,7)
      \ttfamily
      \put(0,0){\framebox(5,4)[tl]{}}
      \multiput(1,4)(1,1){3}{\line(0,1){1}}
      \multiput(1,5)(1,1){3}{\line(1,0){5}}
      \multiput(6,5)(1,1){3}{\line(0,-1){4}}
      \multiput(6,1)(1,1){3}{\line(-1,0){1}}
      \put(0.5,3.5){\circle{0.6}}\put(0.51,3.51){\makebox(0,0){\footnotesize 1}}
      \put(0.5,3){\vector(0,-1){2.5}}
      \put(1.5,3.5){\circle{0.6}}\put(1.51,3.51){\makebox(0,0){\footnotesize 2}}
      \put(2,3.5){\vector(1,0){2.5}}
      \put(6.3,0.3){\circle{0.6}}\put(6.31,0.31){\makebox(0,0){\footnotesize 3}}
      \put(6.7,0.7){\vector(1,1){1.3}}
    \end{picture}
    \subcaption{trois dimensions}
  \end{minipage}
  \hfill
  \begin{minipage}[b]{0.45\linewidth}
    \setlength{\unitlength}{5mm}
    \setlength{\unitlength}{3.5mm}
    \begin{picture}(14,12)
      \ttfamily
      \put(0,0){\framebox(5,4)[tl]{}}
      \multiput(1,4)(1,1){3}{\line(0,1){1}}
      \multiput(1,5)(1,1){3}{\line(1,0){5}}
      \multiput(6,5)(1,1){3}{\line(0,-1){4}}
      \multiput(6,1)(1,1){3}{\line(-1,0){1}}
      \put(6,7){\line(0,1){2}}
      \put(6,9){\line(1,0){5}}
      \put(11,9){\line(0,-1){4}}
      \put(11,5){\line(-1,0){3}}
      \multiput(7,9)(1,1){3}{\line(0,1){1}}
      \multiput(7,10)(1,1){3}{\line(1,0){5}}
      \multiput(12,10)(1,1){3}{\line(0,-1){4}}
      \multiput(12,6)(1,1){3}{\line(-1,0){1}}
      \put(0.5,3.5){\circle{0.8}}\put(0.51,3.51){\makebox(0,0){\scriptsize 1}}
      \put(0.5,2.9){\vector(0,-1){2.4}}
      \put(1.5,3.5){\circle{0.8}}\put(1.51,3.51){\makebox(0,0){\scriptsize 2}}
      \put(2.1,3.5){\vector(1,0){2.4}}
      \put(6.3,0.3){\circle{0.8}}\put(6.31,0.31){\makebox(0,0){\scriptsize 3}}
      \put(6.7,0.7){\vector(1,1){1.3}}
      \put(7.3,0.3){\circle{0.8}}\put(7.31,0.31){\makebox(0,0){\scriptsize 4}}
      \put(7.7,0.7){\vector(1,1){6.3}}
    \end{picture}
    \subcaption{quatre dimensions}
  \end{minipage}
  \caption{Représentation schématique de tableaux. Les chiffres encerclés
    identifient l'ordre de remplissage.}
  \label{fig:bases:tableaux}
\end{figure}

Comme pour les vecteurs, l'indiçage\index{indiçage!matrice} des
matrices et tableaux se fait avec les crochets \fonction{[~]}.
\begin{itemize}
\item On extrait un élément d'une matrice en précisant sa position
  dans chaque dimension de celle-ci, séparées par des virgules:
<<echo=TRUE>>=
(m <- matrix(c(40, 80, 45, 21, 55, 32),
             nrow = 2, ncol = 3))
m[1, 2]
@
\item On peut aussi ne donner que la position de l'élément dans le
  vecteur sous-jacent:
<<echo=TRUE>>=
m[3]
@
\item \label{pg:bases:indicage_matrice} Lorsqu'une dimension est omise
  dans les crochets, tous les éléments de cette dimension sont
  extraits:
<<echo=TRUE>>=
m[2, ]
@
\item Les idées sont les mêmes pour les tableaux.
\item Pour le reste, les règles d'indiçage de vecteurs exposées à la
  \autoref{bases:indicage} s'appliquent à chaque position de
  l'indice d'une matrice ou d'un tableau.
\end{itemize}

Des fonctions permettent de fusionner des matrices et des tableaux
ayant au moins une dimension identique.
\begin{itemize}
\item La fonction \Fonction{rbind} permet de fusionner verticalement
  deux matrices (ou plus) ayant le même nombre de colonnes.
<<echo=TRUE>>=
n <- matrix(1:9, nrow = 3)
rbind(m, n)
@
\item La fonction \Fonction{cbind} permet de fusionner horizontalement
  deux matrices (ou plus) ayant le même nombre de lignes.
<<echo=TRUE>>=
n <- matrix(1:4, nrow = 2)
cbind(m, n)
@
\end{itemize}

\begin{prob-astuce}
  Une matrice convient bien pour stocker un tableau de données.
  Toutefois, puisque la matrice est en fait un vecteur avec un
  attribut \code{dim} de longueur $2$, tous les éléments doivent être
  du même mode, comme c'était le cas avec les vecteurs simples.
  Impossible dans ce cas d'y stocker le nom des équipes. La matrice
  n'est toujours pas le type d'objet approprié.
\end{prob-astuce}

\section{Listes}
\label{bases:listes}

La liste\index{liste} est le mode de stockage le plus général et
polyvalent du langage R. Il s'agit d'un type de vecteur spécial dont
les éléments peuvent être de n'importe quel mode, y compris le mode
\mode{list}. Cela permet donc d'emboiter des listes, d'où le
qualificatif de \emph{récursif} pour ce type d'objet.

\begin{itemize}
\item La fonction de base pour créer des listes est \Fonction{list}:
<<echo=TRUE>>=
(x <- list(size = c(1, 5, 2), user = "Joe", new = TRUE))
@ %
  Ci-dessus, le premier élément de la liste est de mode
  \code{"numeric"}, le second de mode \code{"character"} et le troisième
  de mode \code{"logical"}.
\item Nous recommandons de nommer les éléments d'une liste. En effet,
  les listes contiennent souvent des données de types différents et il
  peut s'avérer difficile d'identifier les éléments s'ils ne sont pas
  nommés. De plus, comme nous le verrons ci-dessous, il est très
  simple d'extraire les éléments d'une liste par leur étiquette.
\item La liste demeure un vecteur. On peut donc
  l'indicer\Index{indiçage!liste} avec l'opérateur \fonction{[~]}.
  Cependant, cela retourne une liste contenant le ou les éléments
  indicés. C'est rarement ce que l'on souhaite.
\item Pour indicer un élément d'une liste et n'obtenir que cet
  élément, et non une liste contenant l'élément, il faut utiliser
  l'opérateur d'indiçage \Fonction{[[~]]}. Comparer
<<echo=TRUE>>=
x[1]
@ %
  et
<<echo=TRUE>>=
x[[1]]
@
  Évidemment, on ne peut extraire qu'un seul élément à la fois
  avec les crochets doubles \code{[[~]]}.
\item Petite subtilité peu employée, mais élégante. Si l'indice
  utilisé dans \fonction{[[~]]} est un vecteur, il est utilisé
  récursivement pour indicer la liste: cela sélectionnera la
  composante de la liste correspondant au premier élément du vecteur,
  puis l'élément de la composante correspondant au second élément du
  vecteur, et ainsi de suite.
\item Une autre --- la meilleure, en fait --- façon d'indicer un seul
  élément d'une liste est par son étiquette avec l'opérateur \Fonction{\$}:
<<echo=TRUE>>=
x$size
@
\item La fonction \Fonction{unlist} convertit une liste en un vecteur
  simple. Elle est surtout utile pour concaténer les éléments d'une
  liste lorsque ceux-ci sont des scalaires. Attention, cette fonction
  peut être destructrice si la structure interne de la liste est
  importante.
\end{itemize}

\begin{table}[p]
  \label{bases:astuce3}
\begin{prob-astuce}
  La liste permettrait de stocker à la fois le nom des équipes et
  leurs statistiques puisqu'elle peut contenir des objets de mode
  différent.

  On crée d'abord des vecteurs simples contenant les données de chaque
  colonne du classement des équipes.
<<echo=TRUE>>=
Equipe <- c("Washington", "Dallas", "Chicago",
            "Los Angeles", "St-Louis", "Détroit",
            "Montréal", "Boston")
MJ  <- c(55, 56, 57, 58, 56, 57, 56, 57)
V   <- c(36, 32, 30, 30, 25, 25, 22, 24)
D   <- c(16, 19, 21, 22, 19, 21, 27, 31)
DP  <- c( 3,  5,  6,  6, 12, 11,  7,  2)
PTS <- c(75, 69, 66, 66, 62, 61, 51, 50)
@
  On les combine ensuite sous forme de liste nommée.
<<echo=TRUE>>=
list(Equipe = Equipe, MJ = MJ, V = V, D = D,
     DP = DP, PTS = PTS)
@
  On constate que R ne présente pas le contenu de la liste sous
  forme d'un tableau. Ce n'est donc pas le type d'objet le mieux
  approprié pour stocker un classement. En fait, la liste est un mode
  de stockage \emph{trop} général pour le type de données dont nous
  disposons.
\end{prob-astuce}
\end{table}


\section{\emph{Data frames}}
\label{bases:dataframes}

Les vecteurs, les matrices, les tableaux et les listes sont les types
d'objets les plus fréquemment utilisés en programmation en R.
Toutefois, un grand nombre de procédures statistiques --- pensons à la
régression linéaire, par exemple --- repose davantage sur les
\emph{data frames} pour le stockage des données.

\begin{itemize}
\item Un \emph{data frame} est une liste de classe
  \indexclasse{data.frame}\code{"data.frame"} dont tous les éléments
  sont de la même longueur (ou comptent le même nombre de lignes si
  les éléments sont des matrices).
\item Il est généralement représenté sous la forme d'un tableau à deux
  dimensions. Chaque élément de la liste sous-jacente correspond à une
  colonne.
\item Bien que visuellement similaire à une matrice un \emph{data
    frame} est plus général puisque les colonnes peuvent être de modes
  différents; pensons à un tableau avec des noms (mode
  \code{character}) dans une colonne et des notes (mode
  \code{numeric}) dans une autre.
\item On crée un \emph{data frame} avec la fonction
  \Fonction{data.frame} ou, pour convertir un autre type d'objet en
  \emph{data frame}, avec \Fonction{as.data.frame}.
\item Le \emph{data frame} peut être indicé à la fois comme une liste
  et comme une matrice.
\item Les fonctions \fonction{rbind} et \fonction{cbind} peuvent être
  utilisées pour ajouter des lignes ou des colonnes à un \emph{data
    frame}.
\item On peut rendre les colonnes d'un \emph{data frame} (ou d'une
  liste) visibles dans l'espace de travail avec la fonction
  \Fonction{attach}, puis les masquer avec \Fonction{detach}.
\end{itemize}

\begin{prob-astuce}
  L'élément distinctif entre un \emph{data frame} et une liste
  générale, c'est que tous les éléments du premier doivent être de la
  même longueur et que, par conséquent, R les dispose en colonnes.
  Nous avons donc ici le type d'objet tout désigné pour stocker des
  données de modes différents, mais qui se présentent sous forme de
  tableau à deux dimensions.
\end{prob-astuce}


\section{Indiçage}
\label{bases:indicage}

L'indiçage des vecteurs\Index{indiçage!vecteur} et
matrices\Index{indiçage!matrice} a déjà été brièvement présenté aux
sections \ref{bases:vecteurs} et \ref{bases:matrices}. La présente
section contient plus de détails sur cette procédure des plus communes
lors de l'utilisation du langage R. On se concentre toutefois sur le
traitement des vecteurs.

\begin{itemize}
\item L'indiçage sert principalement à deux choses:
  soit extraire des éléments d'un objet avec la construction
  \code{x[i]},
  ou les remplacer avec la construction \verb|x[i] <- y|.
\item Il est utile de savoir que ces opérations sont en fait traduites
  par l'interprète R en des appels à des fonctions nommées
  \Fonction{[} et \Fonction{[<-}, dans l'ordre.
\item De même, les opérations d'extraction et de remplacement d'un
  élément d'une liste de la forme \verb|x$etiquette| et
  \verb|x$etiquette <- y| correspondent à des appels aux fonctions
  \fonction{\$} et \fonction{\$<-}.
\end{itemize}

Il existe cinq façons d'indicer un vecteur dans le langage R. Dans
tous les cas, l'indiçage se fait à l'intérieur de crochets
\Fonction{[~]}.
\begin{enumerate}
\item Avec un vecteur d'entiers positifs. Les éléments se trouvant aux
  positions correspondant aux entiers sont extraits du vecteur, dans
  l'ordre. C'est la technique la plus courante:
<<echo=TRUE>>=
x <- c(A = 2, B = 4, C = -1, D = -5, E = 8)
x[c(1, 3)]
@
\item Avec un vecteur d'entiers négatifs. Les éléments se trouvant aux
  positions correspondant aux entiers négatifs sont alors
  \emph{éliminés} du vecteur:
<<echo=TRUE>>=
x[c(-2, -3)]
@
\item Avec un vecteur booléen. Le vecteur d'indiçage doit alors être
  de la même longueur que le vecteur indicé. Les éléments
  correspondant à une valeur \code{TRUE} sont extraits du vecteur,
  alors que ceux correspondant à \code{FALSE} sont éliminés:
<<echo=TRUE>>=
x > 0
x[x > 0]
@
\item Avec un vecteur de chaines de caractères. Utile pour extraire
  les éléments d'un vecteur à condition que ceux-ci soient nommés:
<<echo=TRUE>>=
x[c("B", "D")]
@
\item L'indice est laissé vide. Tous les éléments du vecteur sont
  alors sélectionnés:
<<echo=TRUE>>=
x[]
@
  Cette méthode est essentiellement utilisée avec les matrices et
  tableaux pour sélectionner tous les éléments d'une dimension (voir
  l'exemple à la \autopageref{pg:bases:indicage_matrice}).
  Laisser l'indice vide est différent d'indicer avec un vecteur vide;
  cette dernière opération retourne un vecteur vide.
\end{enumerate}

\begin{prob-solution}
  Nous avons déjà créé à l'Astuce de la \autopageref{bases:astuce3}
  des vecteurs contenant les données des différentes colonnes du
  classement de la ligue.
<<echo=TRUE>>=
Equipe
MJ
V
D
DP
PTS
@

  On crée l'objet \code{classement} qui contiendra le classement de la
  ligue avec la fonction \code{data.frame}. Celle-ci prend en
  arguments les différents vecteurs de données.
<<echo=TRUE>>=
(classement <- data.frame(Equipe, MJ, V, D,  DP, PTS))
@

  On répond ensuite aux questions de traitement des données.
  \begin{enumerate}[a)]
  \item Le nombre d'équipes dans la ligue correspond au nombre de
    lignes de l'objet:
<<echo=TRUE>>=
dim(classement)[1]
@
    ou, comme nous le verrons dans le code informatique de la section
    suivante,
<<echo=TRUE>>=
nrow(classement)
@
  \item Pour extraire la fiche complète de l'équipe de Montréal, il
    suffit d'extraire cette ligne du tableau de données:
<<echo=TRUE>>=
## indiçage par vecteur booléen
classement[classement$Equipe == "Montréal", ]

## extraction par une fonction pratique et élégante
subset(classement, Equipe == "Montréal")
@
  \item Pour extraire la fiche complète de l'équipe à la septième
    position du classement, on peut indicer le tableau par position:
<<echo=TRUE>>=
classement[7, ]
@
  \end{enumerate}
\end{prob-solution}


\section{Exemples}
\label{bases:exemples}

\lstinputlisting[firstline=3]{bases.R}


\vspace{\fill}

\section{Exercices}
\label{bases:exercices}

\Opensolutionfile{solutions}[solutions-bases]

\begin{Filesave}{solutions}
\section*{Chapitre \ref*{bases}}
\addcontentsline{toc}{section}{Chapitre \protect\ref*{bases}}

\end{Filesave}

\begin{exercice}
  \begin{enumerate}
  \item Écrire une expression R pour créer la liste suivante:
<<echo=FALSE>>=
x <- list(1:5, data=matrix(1:6, 2, 3), numeric(3), test=logical(4))
@
<<echo=TRUE>>=
x
@ %
  \item \index{etiquette@étiquette} Extraire les étiquettes de la
    liste.
  \item \index{mode} \index{longueur} Trouver le mode et la longueur
    du quatrième élément de la liste.
  \item \index{dimension} Extraire les dimensions du second élément de
    la liste.
  \item \index{indiçage!liste} Extraire les deuxième et troisième
    éléments du second élément de la liste.
  \item Remplacer le troisième élément de la liste par le vecteur
    \verb|3:8|.
  \end{enumerate}
  \begin{sol}
    \begin{enumerate}
    \item Il y a plusieurs façons de créer les troisième et quatrième
      éléments de la liste. Le plus simple consiste à utiliser
      \code{numeric()} et \code{logical()}:
<<echo=TRUE,eval=FALSE>>=
x <- list(1:5, data = matrix(1:6, 2, 3), numeric(3),
          test = logical(4))
@
    \item
<<echo=TRUE,eval=FALSE>>=
names(x)
@
    \item
<<echo=TRUE,eval=FALSE>>=
mode(x$test)
length(x$test)
@
    \item
<<echo=TRUE,eval=FALSE>>=
dim(x$data)
@
    \item
<<echo=TRUE,eval=FALSE>>=
x[[2]][c(2, 3)]
@
    \item
<<echo=TRUE,eval=FALSE>>=
x[[3]] <- 3:8
@
    \end{enumerate}
  \end{sol}
\end{exercice}

\begin{exercice}
  \index{indiçage!vecteur}
  Soit \code{x} un vecteur contenant les valeurs d'un échantillon:
  \begin{center}
<<echo=FALSE>>=
x <- sample(1:20, 20, replace = TRUE)
@
<<echo=TRUE>>=
x
@
  \end{center}
  Écrire une expression R permettant d'extraire les éléments suivants.
  \begin{enumerate}
  \item Le deuxième élément de l'échantillon.
  \item Les cinq premiers éléments de l'échantillon.
  \item Les éléments strictement supérieurs à $14$.
  \item Tous les éléments sauf les éléments en positions $6$, $10$ et $12$.
  \end{enumerate}
  \begin{sol}
    \begin{enumerate}
\item
<<echo=TRUE,eval=FALSE>>=
x[2]
@
\item
<<echo=TRUE,eval=FALSE>>=
x[1:5]
@
\item
<<echo=TRUE,eval=FALSE>>=
x[x > 14]
@
\item
<<echo=TRUE,eval=FALSE>>=
x[-c(6, 10, 12)]
@
    \end{enumerate}
  \end{sol}
\end{exercice}
%\vspace{\fill}

\begin{exercice}
  \index{indiçage!matrice}
  Soit \code{x} une matrice $10 \times 7$ obtenue aléatoirement avec
<<echo=TRUE,eval=FALSE>>=
x <- matrix(sample(1:100, 70), 7, 10)
@
  Écrire des expressions R permettant d'obtenir les éléments de la
  matrice demandés ci-dessous.
  \begin{enumerate}
  \item L'élément $(4, 3)$.
  \item Le contenu de la sixième ligne.
  \item Les première et quatrième colonnes (simultanément).
  \item Les lignes dont le premier élément est supérieur à $50$.
  \end{enumerate}
  \begin{sol}
    \begin{enumerate}
\item
<<echo=TRUE,eval=FALSE>>=
x[4, 3]
@
\item
<<echo=TRUE,eval=FALSE>>=
x[6, ]
@
\item
<<echo=TRUE,eval=FALSE>>=
x[, c(1, 4)]
@
\item
<<echo=TRUE,eval=FALSE>>=
x[x[, 1] > 50, ]
@
    \end{enumerate}
  \end{sol}
\end{exercice}

\Closesolutionfile{solutions}

%%% Local Variables:
%%% mode: latex
%%% TeX-engine: xetex
%%% TeX-master: "programmer-avec-r"
%%% coding: utf-8
%%% End:
