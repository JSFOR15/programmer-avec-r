\chapter{Présentation du langage R}
\label{presentation}

<<echo=FALSE>>=
options(width=52)
@

\begin{objectifs}
\item Comprendre ce qu'est un langage de programmation interprété.
\item Connaître la provenance du langage R et les principes ayant
  guidé son développement.
\item Mettre en place sur son poste de travail un environnement de
  développement en R.
\item Démarrer une session R et exécuter des commandes simples.
\item Utiliser des fichiers de script R de manière interactive.
\item Créer, modifier et sauvegarder ses propres fichiers de script R.
\end{objectifs}

\section{Bref historique}
\label{presentation:historique}

À l'origine fut le S\index{S}, un langage pour «programmer avec des
données» développé chez Bell Laboratories à partir du milieu des
années 1970 par une équipe de chercheurs menée par John~M.\ Chambers.
Au fil du temps, le S a connu quatre principales versions communément
identifiées par la couleur du livre dans lequel elles étaient
présentées: %
version «originale» \citep[\emph{Brown
  Book;}][]{Chambers:brownbook:1984}, %
version 2 \citep[\emph{Blue Book;}][]{Chambers:bluebook:1988}, %
version 3 \citep[\emph{White Book;}][]{Chambers:whitebook:1992} et %
version 4 \citep[\emph{Green Book;}][]{Chambers:greenbook:1998}; %
voir aussi \cite{Chambers:evolution} et \cite{Becker:historyS:1994}
pour plus de détails.

Dès la fin des années 1980 et pendant près de vingt ans, le S a
principalement été popularisé par une mise en {\oe}uvre commerciale
nommée S-PLUS\index{S-PLUS}. En 2008, Lucent Technologies a vendu le
langage S à Insightful Corporation, ce qui a effectivement stoppé le
développement du langage par ses auteurs originaux. Aujourd'hui, le S
est commercialisé de manière relativement confidentielle sous le nom
Spotfire S$+$\index{S$+$} par TIBCO Software.

Ce qui a fortement contribué à la perte d'influence de S-PLUS, c'est
une nouvelle mise en {\oe}uvre du langage développée au milieu des
années 1990. Inspirés à la fois par le S\index{S} et par
Scheme\index{Scheme} (un dérivé du Lisp), Ross Ihaka et Robert
Gentleman proposent un langage pour l'analyse de données et les
graphiques qu'ils nomment R \citep{Ihaka:R:1996}. À la suggestion
de Martin Maechler de l'ETH de Zurich, les auteurs décident d'intégrer
leur nouveau langage au projet GNU\footnote{%
  \url{http://www.gnu.org}}, %
faisant de R un logiciel libre.

Ainsi disponible gratuitement et ouvert aux contributions de tous,
R gagne rapidement en popularité là même où S-PLUS avait acquis ses
lettres de noblesse, soit dans les milieux académiques. De simple
dérivé «\emph{not unlike S}», R devient un concurrent sérieux à
S-PLUS, puis le surpasse lorsque les efforts de développement se
rangent massivement derrière le projet libre. D'ailleurs John Chambers
place aujourd'hui ses efforts de réflexion et de développement dans le
projet R \citep{Chambers:R:2008}.


\section{Description sommaire de R}
\label{presentation:description}

\ul{R}\marginpar{\video} est un environnement intégré de manipulation
de données, de calcul et de préparation de graphiques. Toutefois, ce
n'est pas seulement un «autre» environnement statistique (comme SPSS
ou SAS, par exemple), mais aussi un langage de programmation complet
et autonome.

Tel que mentionné précédemment, le R est un langage principalement
inspiré du S et de Scheme\index{Scheme} \citep{Sussman:scheme:1996}.
Le S\index{S} était à son tour inspiré de plusieurs langages, dont
l'APL (autrefois un langage très prisé par les actuaires) et le Lisp.
Comme tous ces langages, le R est
\emph{interprété}\index{interprété (langage)}, c'est-à-dire qu'il
requiert un autre programme --- l'\emph{interprète} --- pour que ses
commandes soient exécutées. Par opposition, les programmes de langages
\emph{compilés}\index{compilé (langage)}, comme le C ou le C++, sont
d'abord convertis en code machine par le compilateur puis directement
exécutés par l'ordinateur.

Cela signifie donc que lorsque l'on programme en R, il n'est pas
possible de plaider l'attente de la fin de la phase de compilation
pour perdre son temps au travail. Désolé!

Le programme que l'on lance lorsque l'on exécute R est en fait
l'interprète. Celui-ci attend que l'on lui soumette des commandes dans
le langage R, commandes qu'il exécutera immédiatement, une à une et
en séquence.

Par analogie, Excel est certes un logiciel de manipulation de données,
de mise en forme et de préparation de graphiques, mais c'est aussi au
sens large un langage de programmation interprété. On utilise le
langage de programmation lorsque l'on entre des commandes dans une
cellule d'une feuille de calcul. L'interprète exécute les commandes et
affiche les résultats dans la cellule.

Le R est un langage particulièrement puissant pour les applications
mathématiques et statistiques (et donc actuarielles) puisque
précisément développé dans ce but. Parmi ses caractéristiques
particulièrement intéressantes, on note:
\begin{itemize}
\item langage basé sur la notion de vecteur, ce qui simplifie les
  calculs mathématiques et réduit considérablement le recours aux
  structures itératives (boucles \code{for}, \code{while}, etc.);
\item pas de typage ni de déclaration obligatoire des variables;
\item programmes courts, en général quelques lignes de code seulement;
\item temps de développement très court.
\end{itemize}



\section{Interfaces}
\label{presentation:interfaces}

R est d'abord et avant tout une application n'offrant qu'une invite de
commande du type de celle présentée à la
\autoref{fig:presentation:console}. En soi, cela n'est pas si
différent d'un tableur tel que Excel: la zone d'entrée de texte dans
une cellule n'est rien d'autre qu'une invite de commande\footnote{%
  Merci à Markus Gesmann pour cette observation.}, par ailleurs aux
capacités d'édition plutôt réduites.

\begin{figure}
  \centering
  \includegraphics{console-screenshot}
  \caption{Fenêtre de la console sous Mac OS~X au démarrage de R}
  \label{fig:presentation:console}
\end{figure}

\begin{itemize}
\item Sous Unix et Linux, R n'est accessible que depuis la ligne de
  commande du système d'exploitation (terminal). Aucune interface
  graphique n'est offerte avec la distribution de base de R.
\item Sous Windows, une interface graphique plutôt rudimentaire est
  disponible. Elle facilite certaines opérations tel que
  l'installation de packages externes, mais elle offre autrement peu
  de fonctionnalités additionnelles pour l'édition de code R.
\item L'interface graphique de R sous Mac OS~X est la plus élaborée.
  Outre la console présentée à la
  \autoref{fig:presentation:console}, l'application \code{R.app}
  comporte de nombreuses fonctionnalités, dont un éditeur de code
  assez complet.
\end{itemize}


\section{Stratégies de travail}
\label{presentation:strategies}

Dans la mesure où R se présente essentiellement sous forme d'une
invite de commande, il existe deux grandes stratégies de travail avec
cet environnement statistique.

\begin{enumerate}
\item On entre des expressions à la ligne de commande pour les évaluer
  immédiatement:
<<echo=TRUE>>=
2 + 3
@
  On peut également créer des objets contenant le résultat d'un
  calcul. Ces objets sont stockés en mémoire dans l'espace de travail
  de R:
<<echo=TRUE>>=
x <- exp(2)
x
@
  Lorsque la session de travail est terminée, on sauvegarde une image
  de l'espace de travail sur le disque dur de l'ordinateur afin de
  pouvoir conserver les objets pour une future séance de
  travail\indexfonction{save.image}:
<<eval=FALSE>>=
save.image()
@ %
  Par défaut, l'image est sauvegardée dans un fichier nommé
  \code{.RData} dans le dossier de travail actif (voir la
  \autoref{presentation:workspace}) et cette image est
  automatiquement chargée en mémoire au prochain lancement de
  R, tel qu'indiqué à la fin du message d'accueil:
\begin{verbatim}
[Sauvegarde de la session précédente restaurée]
\end{verbatim}

  Cette approche, dite de «code virtuel et objets réels» a un gros
  inconvénient: le code utilisé pour créer les objets n'est pas
  sauvegardé entre les sessions de travail. Or, celui-ci est souvent
  bien plus compliqué que l'exemple ci-dessus. De plus, sans accès au
  code qui a servi à créer l'objet \code{x}, comment savoir ce que la
  valeur \code{\Sexpr{format(x, dec = ".")}} représente au juste?

\item L'approche dite de «code réel et objets virtuels» considère que
  ce qu'il importe de conserver d'une session de travail à l'autre
  n'est pas tant les objets que le code qui a servi à les créer.
  Ainsi, on sauvegardera dans ce que l'on nommera des \emph{fichiers
    de script} nos expressions R et le code de nos fonctions
  personnelles. Par convention, on donne aux fichiers de script un nom
  se terminant avec l'extension \code{.R}.

  Avec cette approche, les objets sont créés au besoin en exécutant le
  code des fichiers de script. Comment? Simplement en copiant le code
  du fichier de script et en le collant dans l'invite de commande de
  R. La \autoref{fig:presentation:script} illustre schématiquement
  ce que le programmeur R a constamment sous les yeux: d'un côté son
  fichier de script et, de l'autre, l'invite de commande R dans
  laquelle son code a été exécuté.

  La méthode d'apprentissage préconisée dans cet ouvrage suppose que
  le lecteur utilisera cette seconde approche d'interaction avec R.
\end{enumerate}

\begin{figure}
  \centering
  \lstinputlisting[language={},frame=single]{script.R}
  \lstinputlisting[language={},firstline=2,frame=single]{script.Rout}
  \caption{Fichier de script (en haut) et invite de commande R dans
    laquelle les expressions R ont été exécutées (en bas). Les lignes
    débutant par \code{\#} dans le fichier de script sont des
    commentaires ignorés par l'interprète de commandes.}
  \label{fig:presentation:script}
\end{figure}


\section{Éditeurs de texte}
\label{presentation:editeurs}

Dans la mesure où l'on a recours à des fichiers de script tel
qu'expliqué à la section précédente, l'édition de code R bénéficie
grandement d'un bon éditeur de texte pour programmeur. Dans certains
cas, l'éditeur peut même réduire l'opération de copier-coller à un
simple raccourci clavier.
\begin{itemize}
\item Un éditeur de texte est différent d'un traitement de texte en ce
  qu'il s'agit d'un logiciel destiné à la création, l'édition et la
  sauvegarde de fichiers textes purs, c'est-à-dire dépourvus
  d'information de présentation et de mise en forme. Les applications
  Bloc-notes sous Windows ou TextEdit sous Mac OS~X sont deux exemples
  d'éditeurs de texte simples.
\item Un éditeur de texte pour programmeur saura en plus reconnaître
  la syntaxe d'un langage de programmation et assister à sa mise en
  forme: indentation automatique du code, coloration syntaxique,
  manipulation d'objets, etc.
\end{itemize}

Le lecteur peut utiliser l'éditeur de texte de son choix pour
l'édition de code R. Certains éditeurs offrent simplement plus de
fonctionnalités que d'autres.
\begin{itemize}
\item GNU Emacs\index{Emacs} est un très ancien, mais aussi très
  puissant éditeur pour programmeur. À la question 6.2 de la foire aux
  questions de R \citep{R-FAQ}, «Devrais-je utiliser R à l'intérieur
  de Emacs?»\index{Emacs}, la réponse est: «Oui, absolument.»

  En effet, combiné avec le mode ESS\index{ESS} (\emph{Emacs Speaks
    Statistics}), Emacs offre un environnement de développement aussi
  riche qu'efficace. Entre autres fonctionnalités uniques à cet
  éditeur, le fichier de script et l'invite de commandes R sont
  regroupés dans la même fenêtre, comme on peut le voir à la
  \autoref{fig:presentation:emacs}.

  \begin{figure}[t]
    \centering
    \includegraphics{emacs-screenshot}
    \caption{Fenêtre de GNU Emacs sous OS~X en mode d'édition de code
      R. Dans la partie du haut, on retrouve le fichier de script de
      la \autoref{fig:presentation:script} et dans la partie du
      bas, l'invite de commandes R.}
    \label{fig:presentation:emacs}
  \end{figure}

  Emblême du logiciel libre, Emacs est disponible gratuitement et à
  l'identique sur toutes les plateformes supportées par R, dont
  Windows, OS~X et Linux.
\item Consulter l'\autoref{emacs+ess} pour en savoir plus sur
  GNU~Emacs et apprendre les commandes essentielles pour y faire ses
  premiers pas.
\item Malgré tous ses avantages (ou à cause de ceux-ci), Emacs est un
  logiciel difficile à apprivoiser, surtout pour les personnes moins à
  l'aise avec l'informatique.
\item Il existe plusieurs autres options que Emacs pour éditer
  efficacement du code R --- et le Bloc-notes de Windows n'en fait
  \emph{pas} partie! Nous recommandons plutôt:
  \begin{itemize}
  \item sous Windows, l'éditeur Notepad++\index{Notepad++}
    additionné de l'extension NppToR \citep{NppToR}, tous deux des
    logiciels libres;
  \item toujours sous Windows, le partagiciel
    WinEdt\index{WinEdt} muni de l'extension libre
    R-WinEdt \citep{RWinEdt};
  \item sous OS~X, tout simplement l'éditeur de texte très complet
    intégré à l'application \code{R.app}, ou alors l'éditeur de texte
    commercial TextMate (essai gratuit de 30 jours);
  \item sous Linux, Vim et Kate semblent les choix les plus populaires
    après Emacs dans la communauté R.
  \end{itemize}
\end{itemize}



\section{Anatomie d'une session de travail}
\label{presentation:session}

Dans ses grandes lignes, toute session de travail avec R se réduit aux
étapes ci-dessous.
\begin{enumerate}
\item Ouvrir un fichier de script existant ou en créer un nouveau à
  l'aide de l'éditeur de texte de son choix.
\item Démarrer une session R en cliquant sur l'icône de l'application
  si l'on utilise une interface graphique, ou alors en suivant la
  procédure expliquée à l'\autoref{emacs+ess} si l'on utilise
  GNU~Emacs.
\item Au cours de la phase de développement, on fera généralement de
  nombreux aller-retours la ligne de commande où l'on testera des
  commandes et le fichier de script où l'on consignera le code R que
  l'on souhaite sauvegarder et les commentaires qui nous permettront
  de s'y retrouver plus tard.
\item Sauvegarder son fichier de script et quitter l'éditeur.
\item Si nécessaire --- et c'est rarement le cas --- sauvegarder
  l'espace de travail de la session R avec
  \code{save.image()}\indexfonction{save.image}. En fait, on ne voudra
  sauvegarder nos objets R que lorsque ceux-ci sont très longs à créer
  comme, par exemple, les résultats d'une simulation.
\item Quitter R en tapant \code{q()}\indexfonction{q} à la ligne de
  commande ou en fermant l'interface graphique par la procédure
  usuelle. Encore ici, la manière de procéder est quelque peu
  différente dans GNU~Emacs; voir l'\autoref{emacs+ess}.
\end{enumerate}
Évidemment, les étapes 1 et 2 sont interchangeables, tout comme les
étapes 4, 5 et 6.


\section{Répertoire de travail}
\index{repertoire@répertoire de travail|(}
\index{dossier de travail|see{répertoire de travail}}
\label{presentation:workspace}

Le répertoire de travail (\emph{workspace}) de R est le dossier par
défaut dans lequel le logiciel:
\begin{inparaenum}[1)]
\item va rechercher des fichiers de script ou de données; et
\item va sauvegarder l'espace de travail dans le fichier
  \code{.RData}.
\end{inparaenum}
Le dossier de travail est déterminé au lancement de R.
\begin{itemize}
\item Les interfaces graphiques démarrent avec un répertoire de
  travail par défaut. Pour le changer, utiliser l'entrée appropriée
  dans le menu \texttt{Fichier} (Windows) ou \texttt{Divers} (Mac
  OS~X). Consulter aussi les foires aux questions spécifiques aux
  interfaces graphiques \citep{Rw-FAQ,RMacOSX-FAQ} pour des détails
  additionnels sur la gestion des répertoires de travail.
\item Avec GNU~Emacs, la situation est un peu plus simple puisque l'on
  doit spécifier un répertoire de travail chaque fois que l'on démarre
  un processus R; voir l'\autoref{emacs+ess}.
\end{itemize}



\section{Consulter l'aide en ligne}
\label{presentation:aide}

Les rubriques d'aide des diverses fonctions de R contiennent une foule
d'informations ainsi que des exemples d'utilisation. Leur consultation
est tout à fait essentielle.

\begin{itemize}
\item Pour consulter la rubrique d'aide de la fonction \code{foo}, on
  peut entrer à la ligne de commande
\begin{Schunk}
\begin{Sinput}
> ?foo
\end{Sinput}
\end{Schunk}
  ou
\begin{Schunk}
\begin{Sinput}
> help(foo)
\end{Sinput}
\end{Schunk}
\end{itemize}



\section{Où trouver de la documentation}
\label{presentation:doc}

La documentation officielle de R se compose de six guides accessibles
depuis le menu \texttt{Aide} des interfaces graphiques ou encore en
ligne dans le site du projet R\footnote{%
  \url{http://www.r-project.org}}. %
Pour le débutant, seuls \emph{An Introduction to R} et, possiblement,
\emph{R Data Import/Export} peuvent s'avérer des ressources utiles à
court terme.

Plusieurs livres --- en versions papier ou électronique, gratuits ou
non --- ont été publiés sur R. On en trouvera une liste exhaustive
dans la section Documentation du site du projet R.

Depuis plusieurs années maintenant, les ouvrages de
\citet{Venables:s:2000,MASS} demeurent des références standards
\emph{de facto} sur les langages S et R. Plus récent,
\cite{Braun:Rprogramming:2007} participe du même effort que le présent
ouvrage en se concentrant sur la programmation en R plutôt que sur ses
applications statistiques.


\section{Exemples}
\label{presentation:exemples}

\lstinputlisting[firstline=3]{presentation.R}


\section{Exercices}
\label{presentation:exercices}

\begin{exercice}
  Démarrer une session R et entrer une à une les expressions
  ci-dessous à la ligne de commande. Observer les résultats.
<<eval=FALSE>>=
ls()
pi
(v <- c(1, 5, 8))
v * 2
x <- v + c(2, 1, 7)
x
ls()
q()
@
\end{exercice}

\begin{exercice}
  Ouvrir dans un éditeur de texte le fichier de script contenant le
  code de la section précédente. Exécuter le code ligne par ligne et
  observer les résultats. Repéter l'exercice avec un ou deux autres
  éditeurs de texte afin de les comparer et de vous permettre d'en
  choisir un pour la suite.
\end{exercice}

\begin{exercice}
  Consulter les rubriques d'aide d'une ou plusieurs des fonctions
  rencontrées lors de l'exercice précédent. Observer d'abord comment
  les rubriques d'aide sont structurées --- elles sont toutes
  identiques --- puis exécuter quelques expressions tirées des sections
  d'exemples.
\end{exercice}

\begin{exercice}
  Exécuter le code de l'exemple de session de travail R que l'on
  trouve à l'annexe~A de \citet{R-intro}. En plus d'aider à se
  familiariser avec R, cet exercice permet de découvrir les
  fonctionnalités du logiciel en tant qu'outil statistique.
\end{exercice}

%%% Local Variables:
%%% mode: noweb
%%% TeX-master: "introduction_programmation_r"
%%% coding: utf-8
%%% End:
