
R version 2.14.1 (2011-12-22)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-apple-darwin9.8.0/x86_64 (64-bit)

R est un logiciel libre livré sans AUCUNE GARANTIE.
Vous pouvez le redistribuer sous certaines conditions.
Tapez 'license()' ou 'licence()' pour plus de détails.

R est un projet collaboratif avec de nombreux contributeurs.
Tapez 'contributors()' pour plus d'information et
'citation()' pour la façon de le citer dans les publications.

Tapez 'demo()' pour des démonstrations, 'help()' pour l'aide
en ligne ou 'help.start()' pour obtenir l'aide au format HTML.
Tapez 'q()' pour quitter R.

> ## Emacs: -*- coding: utf-8; fill-column: 62; comment-column: 27; -*-
> 
> ### Générer deux vecteurs de nombres pseudo-aléatoires issus
> ### d'une loi normale centrée réduite.
> x <- rnorm(50)
> y <- rnorm(x)
> 
> ### Graphique des couples (x, y).
> plot(x, y)
> 
> ### Graphique d'une approximation de la densité du vecteur x.
> plot(density(x))
> 
> ### Générer la suite 1, 2, ..., 10.
> 1:10
 [1]  1  2  3  4  5  6  7  8  9 10
> 
> ### La fonction 'seq' sert à générer des suites plus générales.
> seq(from = -5, to = 10, by = 3)
[1] -5 -2  1  4  7 10
> seq(from = -5, length = 10)
 [1] -5 -4 -3 -2 -1  0  1  2  3  4
> 
> ### La fonction 'rep' sert à répéter des valeurs.
> rep(1, 5)        # répéter 1 cinq fois
[1] 1 1 1 1 1
> rep(1:5, 5)      # répéter le vecteur 1,...,5 cinq fois
 [1] 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5
> rep(1:5, each = 5) # répéter chaque élément du vecteur cinq fois
 [1] 1 1 1 1 1 2 2 2 2 2 3 3 3 3 3 4 4 4 4 4 5 5 5 5 5
> 
> ### Arithmétique vectorielle.
> v <- 1:12        # initialisation d'un vecteur
> v + 2            # additionner 2 à chaque élément de v
 [1]  3  4  5  6  7  8  9 10 11 12 13 14
> v * -12:-1       # produit élément par élément
 [1] -12 -22 -30 -36 -40 -42 -42 -40 -36 -30 -22 -12
> v + 1:3          # le vecteur le plus court est recyclé
 [1]  2  4  6  5  7  9  8 10 12 11 13 15
> 
> ### Vecteur de nombres uniformes sur l'intervalle [1, 10].
> v <- runif(12, min = 1, max = 10)
> v
 [1] 8.694123 5.123031 2.992828 2.955690 9.269240 7.329399 9.360810 9.212244
 [9] 1.530096 5.616851 9.471742 5.874994
> 
> ### Pour afficher le résultat d'une affectation, placer la
> ### commande entre parenthèses.
> ( v <- runif(12, min = 1, max = 10) )
 [1] 4.002060 3.423991 7.026129 6.117503 8.443092 3.903677 4.745571 2.951993
 [9] 2.980601 2.623789 6.820947 1.610781
> 
> ### Arrondi des valeurs de v à l'entier près.
> ( v <- round(v) )
 [1] 4 3 7 6 8 4 5 3 3 3 7 2
> 
> ### Créer une matrice 3 x 4 à partir des valeurs de
> ### v. Remarquer que la matrice est remplie par colonne.
> ( m <- matrix(v, nrow = 3, ncol = 4) )
     [,1] [,2] [,3] [,4]
[1,]    4    6    5    3
[2,]    3    8    3    7
[3,]    7    4    3    2
> 
> ### Les opérateurs arithmétiques de base s'appliquent aux
> ### matrices comme aux vecteurs.
> m + 2
     [,1] [,2] [,3] [,4]
[1,]    6    8    7    5
[2,]    5   10    5    9
[3,]    9    6    5    4
> m * 3
     [,1] [,2] [,3] [,4]
[1,]   12   18   15    9
[2,]    9   24    9   21
[3,]   21   12    9    6
> m ^ 2
     [,1] [,2] [,3] [,4]
[1,]   16   36   25    9
[2,]    9   64    9   49
[3,]   49   16    9    4
> 
> ### Éliminer la quatrième colonne afin d'obtenir une matrice
> ### carrée.
> ( m <- m[,-4] )
     [,1] [,2] [,3]
[1,]    4    6    5
[2,]    3    8    3
[3,]    7    4    3
> 
> ### Transposée et inverse de la matrice m.
> t(m)
     [,1] [,2] [,3]
[1,]    4    3    7
[2,]    6    8    4
[3,]    5    3    3
> solve(m)
      [,1]  [,2]  [,3]
[1,] -0.12 -0.02  0.22
[2,] -0.12  0.23 -0.03
[3,]  0.44 -0.26 -0.14
> 
> ### Produit matriciel.
> m %*% m               # produit de m avec elle-même
     [,1] [,2] [,3]
[1,]   69   92   53
[2,]   57   94   48
[3,]   61   86   56
> m %*% solve(m)        # produit de m avec son inverse
     [,1] [,2]          [,3]
[1,]    1    0 -1.110223e-16
[2,]    0    1  0.000000e+00
[3,]    0    0  1.000000e+00
> round(m %*% solve(m)) # l'arrondi donne la matrice identité
     [,1] [,2] [,3]
[1,]    1    0    0
[2,]    0    1    0
[3,]    0    0    1
> 
> ### Consulter la rubrique d'aide de la fonction 'solve'.
> ?solve
solve                   package:base                   R Documentation

_S_o_l_v_e _a _S_y_s_t_e_m _o_f _E_q_u_a_t_i_o_n_s

_D_e_s_c_r_i_p_t_i_o_n:

     This generic function solves the equation ‘a %*% x = b’ for ‘x’,
     where ‘b’ can be either a vector or a matrix.

_U_s_a_g_e:

     solve(a, b, ...)
     
     ## Default S3 method:
     solve(a, b, tol, LINPACK = FALSE, ...)
     
_A_r_g_u_m_e_n_t_s:

       a: a square numeric or complex matrix containing the
          coefficients of the linear system.

       b: a numeric or complex vector or matrix giving the right-hand
          side(s) of the linear system.  If missing, ‘b’ is taken to be
          an identity matrix and ‘solve’ will return the inverse of
          ‘a’.

     tol: the tolerance for detecting linear dependencies in the
          columns of ‘a’.  If ‘LINPACK’ is ‘TRUE’ the default is
          ‘1e-7’, otherwise it is ‘.Machine$double.eps’. Future
          versions of R may use a tighter tolerance.  Not currently
          used with complex matrices ‘a’.

 LINPACK: logical.  Should LINPACK be used (for compatibility with R <
          1.7.0)?  Otherwise LAPACK is used.

     ...: further arguments passed to or from other methods

_D_e_t_a_i_l_s:

     ‘a’ or ‘b’ can be complex, but this uses double complex arithmetic
     which might not be available on all platforms and LAPACK will
     always be used.

     The row and column names of the result are taken from the column
     names of ‘a’ and of ‘b’ respectively.  If ‘b’ is missing the
     column names of the result are the row names of ‘a’.  No check is
     made that the column names of ‘a’ and the row names of ‘b’ are
     equal.

     For back-compatibility ‘a’ can be a (real) QR decomposition,
     although ‘qr.solve’ should be called in that case.  ‘qr.solve’ can
     handle non-square systems.

_R_e_f_e_r_e_n_c_e_s:

     Becker, R. A., Chambers, J. M. and Wilks, A. R. (1988) _The New S
     Language_.  Wadsworth & Brooks/Cole.

_S_e_e _A_l_s_o:

     ‘solve.qr’ for the ‘qr’ method, ‘chol2inv’ for inverting from the
     Choleski factor ‘backsolve’, ‘qr.solve’.

_E_x_a_m_p_l_e_s:

     hilbert <- function(n) { i <- 1:n; 1 / outer(i - 1, i, "+") }
     h8 <- hilbert(8); h8
     sh8 <- solve(h8)
     round(sh8 %*% h8, 3)
     
     A <- hilbert(4)
     A[] <- as.complex(A)
     ## might not be supported on all platforms
     try(solve(A))
     

> 
> ### Liste des objets dans l'espace de travail.
> ls()
[1] "m" "v" "x" "y"
> 
> ### Nettoyage.
> rm(x, y, v, m)
> 
