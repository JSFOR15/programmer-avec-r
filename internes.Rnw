%%% Copyright (C) 2017 Vincent Goulet
%%%
%%% Ce fichier fait partie du projet «Programmer avec R»
%%% http://github.com/vigou3/programmer-avec-r
%%%
%%% Cette création est mise à disposition selon le contrat
%%% Attribution-Partage dans les mêmes conditions 4.0
%%% International de Creative Commons.
%%% http://creativecommons.org/licenses/by-sa/4.0/

\chapter{Fonctions internes utiles et extensions}
\label{chap:internes}

<<echo=FALSE>>=
options(width=52)
@

\begin{objectifs}
\item Utiliser les fonctions R les plus courantes, notamment pour le
  traitement des vecteurs, le calcul de sommaires et la manipulation
  des matrices et des tableaux.
\item Distinguer les concepts de paquetage et de bibliothèque dans R.
\item Utiliser les fonctionnalités d'un paquetage dans une session de
  travail R.
\item Installer de nouveaux paquetages R depuis le site
  \emph{Comprehensive R Archive Network} (CRAN).
\end{objectifs}

Ce chapitre présente les principaux opérateurs arithmétiques,
fonctions mathématiques et structures de contrôle disponibles dans R.
La liste est évidemment loin d'être exhaustive, surtout étant donné
l'évolution rapide du langage. Un des meilleurs endroits pour
découvrir de nouvelles fonctions demeure la section \texttt{See Also}
des rubriques d'aide, qui offre des hyperliens vers des fonctions
apparentées au sujet de la rubrique.


\section{Opérateurs}
\label{sec:internes:operateurs}

Nous avons déjà présenté au \autoref{tab:bases:operateurs} les
opérateurs mathématiques et logiques les plus fréquemment employés, en
ordre décroissant de priorité des opérations.

\tipbox{Les opérateurs de puissance \verb|^| et d'affectation
  \icode{<-} sont évalués de droite à gauche; tous les autres le sont
  de gauche à droite. Ainsi, \verb|2^2^3| est \verb|2^8|, et non
  \verb|4^3|, alors que \verb|1 - 1 - 1| vaut \verb|-1|, et non
  \verb|1|.}

\begin{ttscript}{\%/\%}
\item[\code{\%\%}] modulo (reste d'une division)
<<echo=TRUE>>=
5 %% 3
@
\item[\code{\%/\%}] division entière (partie entière d'une division)
<<echo=TRUE>>=
5 %/% 3
@
\end{ttscript}


\section{Fonctions utiles}
\label{sec:internes:fonctions}

Le langage R compte un très grand nombre (des milliers!) de fonctions
internes. Cette section en présente quelques-unes seulement, les
fonctions de base les plus souvent utilisées pour programmer en R et
pour manipuler des données.

Pour chaque fonction présentée dans les sections suivantes, on fournit
un ou deux exemples d'utilisation. Ces exemples sont souvent loin de
courvrir toutes les utilisations possibles d'une fonction. La
\autoref{internes:exemples} fournit des exemples additionnels,
mais il est recommandé de consulter les diverses rubriques d'aide pour
connaître toutes les options des fonctions.


\subsection{Suites et répétition}
\label{sec:internes:fonctions:seq}

\begin{ttscript}{seqmalong}
\item[\Icode{seq}] suite de nombres générale
<<echo=TRUE>>=
seq(1, 9, by = 2)
@
\item[\Icode{\protect seq\_len}] \index{suite}suite de nombres de $1$
  à la valeur de l'argument (plus rapide que \code{seq})
<<echo=TRUE>>=
seq_len(10)
@
\item[\Icode{\protect seq\_along}] suite de nombres de $1$ à la
  longueur du vecteur en argument (plus rapide que \code{seq})
<<echo=TRUE>>=
seq_len(10)
@
\item[\Icode{rep}] \index{repetition@répétition}répétition de valeurs
  ou de vecteurs
<<echo=TRUE>>=
rep(2, 10)
@
\end{ttscript}

\subsection{Tri}
\label{sec:internes:fonctions:tri}

\begin{ttscript}{order}
\item[\Icode{sort}] \index{tri}tri en ordre croissant ou
  décroissant
<<echo=TRUE>>=
sort(c(4, -1, 2, 6))
@
\item[\Icode{rank}] \index{rang}rang des éléments d'un vecteur dans
  l'ordre croissant ou décroissant
<<echo=TRUE>>=
rank(c(4, -1, 2, 6))
@
\item[\href{https://youtu.be/order}{\Icode{order}}] \index{ordre}ordre
  \capsule{https://youtu.be/order}{} d'extraction des éléments d'un
  vecteur pour les placer en ordre croissant ou décroissant
<<echo=TRUE>>=
order(c(4, -1, 2, 6))
@
\item[\Icode{rev}] vecteur \index{renverser}renversé
<<echo=TRUE>>=
rev(1:10)
@
\item[\Icode{unique}] éléments uniques d'un vecteur
<<echo=TRUE>>=
unique(c(2, 4, 2, 5, 9, 5, 0))
@
\end{ttscript}

\subsection{Extraction du début et de la fin d'un objet}
\label{sec:internes:fonctions:head}

\begin{ttscript}{head}
\item[\Icode{head}] avec second argument $n > 0$ ($n = 6$ par défaut):
  $n$ premières composantes d'un objet (éléments d'un vecteur, lignes
  d'une matrice ou d'un \emph{data frame}); avec second argument
  $n < 0$: objet sans les $|n|$ dernières composantes
<<echo=TRUE>>=
head(1:10, 3)
head(1:10, -3)
@
\item[\Icode{tail}] avec second argument $n > 0$ ($n = 6$ par défaut):
  $n$ dernières composantes d'un objet (éléments d'un vecteur, lignes
  d'une matrice ou d'un \emph{data frame}); avec second argument
  $n < 0$: objet sans les $|n|$ premières composantes
<<echo=TRUE>>=
tail(1:10, 3)
tail(1:10, -3)
@
\end{ttscript}


\subsection{Recherche dans un vecteur}
\label{sec:internes:fonctions:recherche}

Les illustrations de cette sous-section utilisent le vecteur suivant.
<<echo=FALSE>>=
x <- c(4, -1, 2, -3, 6)
@
<<echo=TRUE>>=
x
@

\begin{ttscript}{which.max}
\item[\Icode{which}] positions des éléments satisfaisant la condition
  en argument
<<echo=TRUE>>=
which(x < 0)
@
\item[\Icode{which.min}] position du \index{minimum!position}minimum
<<echo=TRUE>>=
which.min(x)
@
\item[\Icode{which.max}] position du \index{maximum!position}maximum
<<echo=TRUE>>=
which.max(x)
@
\item[\Icode{match}] position de la première occurrence d'un élément
<<echo=TRUE>>=
match(2, x)
@
\item[\Icode{\%in\%}] appartenance d'une ou plusieurs valeurs au
  vecteur
<<echo=TRUE>>=
-1:2 %in% x
@
\end{ttscript}


\subsection{Arrondi}
\label{sec:internes:fonctions:arrondi}

Les illustrations de cette sous-section utilisent le vecteur suivant.
<<echo=FALSE>>=
x <- c(-3.68, -2/3, pi, 1/3, 2.52)
@
<<echo=TRUE>>=
x
@

\begin{ttscript}{ceiling}
\item[\Icode{round}] \index{arrondi}arrondi à un nombre défini de
  décimales ($0$ par défaut)
<<echo=TRUE>>=
round(x)
round(x, 3)
@
\item[\Icode{floor}] plus grand entier inférieur ou égal à l'argument
<<echo=TRUE>>=
floor(x)
@
\item[\Icode{ceiling}] plus petit entier supérieur ou égal à
  l'argument
<<echo=TRUE>>=
ceiling(x)
@
\item[\Icode{trunc}] troncature vers zéro; différent de \texttt{floor}
  pour les nombres négatifs
<<echo=TRUE>>=
trunc(x)
@
\end{ttscript}


\subsection{Sommaires et statistiques descriptives}
\label{sec:internes:fonctions:sommaires}

Les illustrations de cette sous-section utilisent le vecteur suivant.
<<echo=FALSE>>=
x <- c(14, 17, 7, 9, 3, 4, 25, 21, 24, 11)
@
<<echo=TRUE>>=
x
@

\begin{ttscript}{sum, prod}
\item[\Icode{sum}, \Icode{prod}] \index{somme}somme et
  \index{produit}produit des éléments d'un vecteur
<<echo=TRUE>>=
sum(x)
prod(x)
@
\item[\Icode{diff}] \index{différences}différences entre les éléments
  d'un vecteur (opérateur mathématique $\nabla$)
<<echo=TRUE>>=
diff(x)
@
\item[\Icode{mean}] \index{moyenne}moyenne arithmétique (et moyenne
  tronquée avec l'argument \code{trim})
<<echo=TRUE>>=
mean(x)
@
\item[\Icode{var}, \Icode{sd}] \index{variance}variance et
  \index{ecart type@écart type}écart type (versions sans biais)
<<echo=TRUE>>=
var(x)
@
\item[\Icode{min}, \Icode{max}] \index{minimum!valeur}minimum et
  \index{maximum!valeur}maximum d'un vecteur
<<echo=TRUE>>=
min(x)
max(x)
@
\item[\Icode{range}] \index{etendue@étendue}étendue d'un vecteur
  (minimum et maximum)
<<echo=TRUE>>=
range(x)
@
\item[\Icode{median}] \index{mediane@médiane}médiane empirique
<<echo=TRUE>>=
median(x)
@
\item[\Icode{quantile}] \index{quantile}quantiles empiriques
<<echo=TRUE>>=
quantile(x)
@
\item[\Icode{summary}] principales statistiques descriptives
<<echo=TRUE>>=
summary(x)
@
\end{ttscript}


\subsection{Sommaires cumulatifs et comparaisons élément par élément}
\label{sec:internes:fonctions:cumulatifs}

Les illustrations de cette sous-section utilisent le vecteur suivant.
<<echo=FALSE>>=
x <- c(14, 17, 7, 9, 3)
@
<<echo=TRUE>>=
x
@

\begin{ttscript}{cumsum, cumprod}
\item[\Icode{cumsum}, \Icode{cumprod}] \index{somme!cumulative}somme
  cumulative et \index{produit!cumulatif}produit cumulatif
<<echo=TRUE>>=
cumsum(x)
cumprod(x)
@
\item[\Icode{cummin}, \Icode{cummax}] \index{minimum!cumulatif}minimum
  et \index{maximum!cumulatif}maximum cumulatif
<<echo=TRUE>>=
cummin(x); cummax(x)
@
\item[\Icode{pmin}, \Icode{pmax}] \index{minimum!parallèle}minimum et
  \index{maximum!parallèle}maximum élément par élément (en parallèle)
<<echo=TRUE>>=
pmin(x, 12)
pmax(x, c(16, 23,  4, 12,  3))
@
\end{ttscript}


\subsection{Opérations sur les matrices}
\label{sec:internes:fonctions:matrices}

Les illustrations de cette sous-section utilisent la matrice suivante.
<<echo=FALSE>>=
x <- matrix(c(2, 1, 4, 3), 2)
@
<<echo=TRUE>>=
x
@

\begin{ttscript}{rowMeans, colMeans}
\item[\Icode{nrow}, \Icode{ncol}] \index{matrice!nombre de
    lignes}nombre de lignes et nombre de \index{matrice!nombre de
    colonnes}colonnes
<<echo=TRUE>>=
nrow(x)
ncol(x)
@
\item[\Icode{rowSums}, \Icode{colSums}] \index{matrice!sommes par
    ligne}sommes par ligne et \index{matrice!sommes par colonne}sommes
  par colonne
<<echo=TRUE>>=
rowSums(x)
@
\item[\Icode{rowMeans}, \Icode{colMeans}] \index{matrice!moyennes par
    ligne}moyennes par ligne et \index{matrice!moyennes par
    colonne}moyennes par colonne
<<echo=TRUE>>=
colMeans(x)
@
\item[\code{\%*\%}] \index{matrice!produit}produit matriciel
<<echo=TRUE>>=
x %*% x
@
\item[\Icode{t}] \index{matrice!transposée}transposée
<<echo=TRUE>>=
t(x)
@
\item[\Icode{det}] \index{matrice!déterminant}déterminant
<<echo=TRUE>>=
det(x)
@
\item[\Icode{solve}] avec un seul argument (une matrice carrée):
  \index{matrice!inverse}inverse; avec deux arguments (une matrice
  carrée et un vecteur): solution du système d'équations linéaires
  $\mat{A} \mat{x} = \mat{b}$
<<echo=TRUE>>=
solve(x)
solve(x, c(1, 2))
@
\item[\Icode{diag}] avec une matrice en argument:
  \index{matrice!diagonale}diagonale de la matrice; avec un vecteur en
  argument: matrice diagonale formée avec le vecteur; avec un scalaire
  $p$ en argument: \index{matrice!identité}matrice identité
  $p \times p$
<<echo=TRUE>>=
diag(x)
diag(c(5, 1))
diag(2)
@
\end{ttscript}


\section{Bibliothèques et paquetages}
\label{sec:internes:paquetages}

Dans la terminologie de R, un \index{paquetage}\emph{paquetage}
(\emph{package}\footnote{%
  L'équipe de traduction française de R a choisi de conserver le terme
  anglais. Nous ne les suivons pas dans cette voie.}). %
est un ensemble cohérent de fonctions, de jeux de données et de
documentation. Les paquetages sont régroupés dans une
\emph{bibliothèque} (\emph{library}).

La modularité et l'ouverture de R rendent facile d'ajouter des
fonctionnalités au système de base. Cette section explique comment
ajouter une bibliothèque personnelle au système et comment la garnir
de paquetages téléchargés depuis le site \emph{Comprehensive R Archive
  Network} (CRAN).

\warningbox{Insistons sur la terminologie puisque la confusion règne
  souvent hors de la documentation officielle de R: un paquetage est
  un ensemble de fonctions, alors qu'une bibliothèque est un ensemble
  de paquetages.}

\subsection{Système de base}
\label{sec:internes:paquetages:base}

La bibliothèque de base de R contient une trentaine de paquetages dont
certains sont chargés par défaut au démarrage. La fonction
\icode{search} fournit la liste des paquetages chargés dans la session
de travail, alors que \icode{library} affiche le contenu de la
bibliothèque de paquetages.
\begin{Schunk}
\begin{Sinput}
> search()
\end{Sinput}
\begin{Soutput}
<<echo=FALSE, results=tex, strip.white=FALSE>>=
search()
@
\end{Soutput}
\begin{Sinput}
> library()
\end{Sinput}
\begin{Verbatim}[commandchars=\\\{\}]
Packages dans la bibliothèque
‘/Library/Frameworks/R.framework/\meta{...}/library’ :

base           The R Base Package
boot           Bootstrap Functions
               (Originally by Angelo Canty
               for S)
\meta{...}
\end{Verbatim}
\end{Schunk}

La fonction \Icode{library} sert également --- et surtout, en fait ---
à charger un paquetage dans la session de travail.
\begin{Schunk}
\begin{Verbatim}[commandchars=\\\{\}]
library("\meta{paquetage}")
\end{Verbatim}
\end{Schunk}

\subsection{Création d'une bibliothèque personnelle}
\label{sec:internes:paquetages:library}

Nous recommandons fortement de créer une bibliothèque personnelle pour
contenir les paquetages ajoutés au système de base. Tout d'abord, cela
permet d'éviter les éventuels problèmes d'accès en écriture dans la
bibliothèque principale, surtout sur des systèmes partagés. Ensuite,
les paquetages placés dans une bibliothèque personnelle résistent
mieux au processus de mise à jour de R que ceux ajoutés à la
bibliothèque principale.

Avant toute chose, vous devez créer un répertoire dans votre système
de fichiers qui servira de bibliothèque personnelle. Dans la suite,
nous utiliserons \verb=~/R/library=, où \verb=~= représente le dossier
de départ (\autoref{sec:informatique:os:unix}).

\osxbox{Sous macOS, le dossier tout indiqué pour la bibliothèque
  personnelle est \verb=~/Library/R/library=. Toutefois, le dossier
  \verb=~/Library= est caché dans le Finder. Pour y accéder, cliquez
  sur le menu \code{Aller} en appuyant simultanément sur la touche
  Option (\optkey), puis sélectionnez \code{Bibliothèque}.}

Au démarrage, R lit le fichier de configuration \verb=~/.Renviron=,
s'il existe. C'est dans ce fichier que vous devez indiquer à R
l'endroit où se trouve votre bibliothèque personnelle dans le système
de fichiers.

Ouvrez ou créez le fichier \verb=~/.Renviron= à l'aide de votre
éditeur de texte favori\footnote{Pour créer le fichier dans RStudio,
  sélectionner \code{File|New File|Text File}.} et ajoutez-y la ligne
suivante:
\begin{Schunk}
\begin{verbatim}
R_LIBS_USER="~/R/library"
\end{verbatim}
\end{Schunk}
Au besoin, remplacez le chemin \verb=~/R/library= par celui du
répertoire créé précédemment. Utilisez la barre oblique avant
(\code{/}) pour séparer les répertoires dans le chemin d'accès.

\osxbox{Pour afficher les fichiers débutant par un point dans la boite
  de dialogue d'ouverture de fichier d'une application comme RStudio,
  appuyez sur \shiftkey\cmdkey\code{.} (\shiftkey\cmdkey~«point»).}

Une fois la configuration terminée et après un redémarrage de R, le
chemin vers la bibliothèque personnelle devrait apparaitre dans les
résultats de la commande \icode{.libPaths}.
\begin{Schunk}
\begin{Sinput}
> .libPaths()
\end{Sinput}
\begin{Verbatim}[commandchars=\\\{\}]
<<echo=FALSE, results=tex, strip.white=false>>=
cat(paste0('"', sub("Versions/.*?/Resources", "\\\\meta{...}", .libPaths()), '"'),
    fill = TRUE, labels = c("[1]", "[2]"))
@
\end{Verbatim}
\end{Schunk}

La bibliothèque personnelle a toujours préséance sur la bibliothèque
principale.

\tipbox{Consulter la rubriques d'aide de \icode{Startup} pour les
  détails sur la syntaxe et l'emplacement des fichiers de
  configuration, celles de \icode{library} et \icode{.libPaths} pour
  la gestion des bibliothèques et celle de \icode{options} pour les
  différentes options reconnues par R.}

\subsection{Installation de paquetages additionnels}
\label{sec:internes:paquetages:install}

Dès les débuts de R, les développeurs et utilisateurs ont mis sur pied
le dépôt central de paquetages
\link{http://cran.r-project.org}{\emph{Comprehensive R Archive
    Network}} (CRAN). Ce site compte aujourd'hui des milliers de
paquetages et le nombre ne cesse de croitre.

L'installation d'un paquetage distribué via CRAN est très simple avec
la fonction \Icode{install.packages}. Celle-ci télécharge le paquetage
spécifié en argument depuis CRAN et l'installe, par défaut, dans la
première bibliothèque de \icode{.libPaths}.
\begin{Schunk}
\begin{Verbatim}[commandchars=\\\{\}]
install.packages("\meta{paquetage}")
\end{Verbatim}
\end{Schunk}

Pour utiliser le paquetage, il faut le charger en mémoire avec
\icode{library}, tel qu'expliqué à la
\autoref{sec:internes:paquetages:base}. R recherche le paquetage
spécifié dans les bibliothèques de \icode{.libPaths}.


\section{Exemples}
\label{sec:internes:exemples}

\def\scriptfilename{internes.R}

\scriptfile{\scriptfilename}
\lstinputlisting[firstline=13]{\scriptfilename}


\section{Exercices}
\label{sec:internes:exercices}

\Opensolutionfile{solutions}[solutions-internes]

\begin{Filesave}{solutions}
\section*{Chapitre \ref*{chap:internes}}
\addcontentsline{toc}{section}{Chapitre \protect\ref*{internes}}

\end{Filesave}

\SweaveOpts{echo=FALSE, results=tex, strip.white=false}
\begin{exercice}
  Générer les séquences suivantes à l'aide des fonctions \icode{rep},
  \icode{seq} et \code{c} seulement.
  \begin{enumerate}
  \item
\begin{verbatim}
<<>>=
cat(rep(c(0, 6), 3))
@
\end{verbatim}
  \item
\begin{verbatim}
<<>>=
cat(seq(1, 10, by = 3))
@
\end{verbatim}
  \item
\begin{verbatim}
<<>>=
cat(rep(1:3, 4))
@
\end{verbatim}
  \item
\begin{verbatim}
<<>>=
cat(rep(1:3, 1:3))
@
\end{verbatim}
  \item
\begin{verbatim}
<<>>=
cat(rep(1:3, 3:1))
@
\end{verbatim}
  \item
\begin{verbatim}
<<>>=
cat(seq(1, 10, length = 3))
@
\end{verbatim}
  \item
\begin{verbatim}
<<>>=
cat(rep(1:3, rep(4, 3)))
@
\end{verbatim}
  \end{enumerate}
\SweaveOpts{echo=TRUE, eval=FALSE}
  \begin{sol}
    \begin{enumerate}
\item
<<>>=
rep(c(0, 6), 3)
@
\item
<<>>=
seq(1, 10, by = 3)
@
\item
<<>>=
rep(1:3, 4)
@
\item
<<>>=
rep(1:3, 1:3)
@
\item
<<>>=
rep(1:3, 3:1)
@
\item
<<>>=
seq(1, 10, length = 3)
@
\item
<<>>=
rep(1:3, rep(4,3))
@
    \end{enumerate}
  \end{sol}
\end{exercice}

\SweaveOpts{echo=FALSE, eval=TRUE, results=tex, strip.white=false}
\begin{exercice}
  Générer les suites de nombres suivantes à l'aide des fonctions
  {\NoAutoSpacing\verb=:=}\index{:@\verb=:=} et \icode{rep} seulement
  (donc sans utiliser la fonction \icode{seq}).
  \begin{enumerate}
  \item
\begin{verbatim}
<<>>=
cat(11:20 / 10)
@
\end{verbatim}
  \item
\begin{verbatim}
<<>>=
cat(2 * 0:9 + 1)
@
\end{verbatim}
  \item
\begin{verbatim}
<<>>=
cat(rep(-2:2, 2))
@
\end{verbatim}
  \item
\begin{verbatim}
<<>>=
cat(rep(-2:2, each = 2))
@
\end{verbatim}
  \item
\begin{verbatim}
<<>>=
cat(10 * 1:10)
@
\end{verbatim}
  \end{enumerate}
\SweaveOpts{echo=TRUE, eval=FALSE}
  \begin{sol}
    \begin{enumerate}
\item
<<>>=
11:20 / 10
@
\item
<<>>=
2 * 0:9 + 1
@
\item
<<>>=
rep(-2:2, 2)
@
\item
<<>>=
rep(-2:2, each = 2)
@
\item
<<>>=
10 * 1:10
@
    \end{enumerate}
  \end{sol}
\end{exercice}

\SweaveOpts{echo=TRUE, eval=FALSE}

\begin{exercice}
  Sans utiliser les fonctions \icode{factorial}, \icode{lfactorial},
  \icode{gamma} ou \icode{lgamma}, générer la suite
  $1!, 2!, \dots, 10!$.
  \begin{sol}
<<>>=
cumprod(1:10)
@
  \end{sol}
\end{exercice}

\begin{exercice}
  Trouver une relation entre \code{x}, \code{y} (\code{y != 0}),
  \code{x \%\% y} (modulo) et \code{x \%/\% y} (division entière).
  \begin{sol}
    \verb|x == (x %% y) + y * (x %/% y)|
  \end{sol}
\end{exercice}

\begin{exercice}
  Soit \code{x} un vecteur de longueur $20$ quelconque. Écrire des
  expressions R permettant d'obtenir ou de calculer chacun des
  résultats demandés ci-dessous.
  \begin{enumerate}
  \item Les cinq premiers éléments de \code{x}.
  \item La valeur maximale de \code{x}.
  \item La moyenne des cinq premiers éléments de \code{x}.
  \item La moyenne des cinq derniers éléments de \code{x}.
  \end{enumerate}
  \begin{sol}
    \begin{enumerate}
\item
<<>>=
x[1:5]
head(x, 5)
@
\item
<<>>=
max(x)
@
\item
<<>>=
mean(x[1:5])
mean(head(x, 5))
@
\item
<<>>=
mean(x[16:20])
mean(tail(x, 5))
@
    \end{enumerate}
  \end{sol}
\end{exercice}

\begin{exercice}
  Soit \code{m} une matrice $10 \times 7$ quelconque. Écrire des
  expressions R permettant d'effectuer les tâches demandées
  ci-dessous.
  \begin{enumerate}
  \item Calculer la somme des éléments de chacunes des lignes de la
    matrice.
  \item Calculer la moyenne des éléments de chacunes des colonnes de
    la matrice.
  \item Calculer la valeur maximale de la sous-matrice formée par les
    trois premières lignes et les trois premières colonnes de la
    matrice.
  \item Extraire toutes les lignes de la matrice dont la moyenne des
    éléments est supérieure à $7$.
  \end{enumerate}
  \begin{sol}
    \begin{enumerate}
\item
<<>>=
rowSums(m)
@
\item
<<>>=
colMeans(m)
@
\item
<<>>=
max(m[1:3, 1:3])
@
\item
<<>>=
m[rowMeans(m) > 7, ]
@
    \end{enumerate}
  \end{sol}
\end{exercice}

\begin{exercice}
  On vous donne la liste et la date des 31 meilleurs temps enregistrés
  au 100~mètres homme entre 1964 et 2005.
<<echo=TRUE>>=
temps <- c(10.06, 10.03, 10.02,  9.95, 10.04, 10.07,
           10.08, 10.05,  9.98, 10.09, 10.01, 10.00,
            9.97,  9.93,  9.96,  9.99,  9.92,  9.94,
            9.90,  9.86,  9.88,  9.87,  9.85,  9.91,
            9.84,  9.89,  9.79,  9.80,  9.82,  9.78,
            9.77)
names(temps) <- c("1964-10-15", "1968-06-20",
    "1968-10-13", "1968-10-14", "1968-10-14",
    "1968-10-14", "1968-10-14", "1975-08-20",
    "1977-08-11", "1978-07-30", "1979-09-04",
    "1981-05-16", "1983-05-14", "1983-07-03",
    "1984-05-05", "1984-05-06", "1988-09-24",
    "1989-06-16", "1991-06-14", "1991-08-25",
    "1991-08-25", "1993-08-15", "1994-07-06",
    "1994-08-23", "1996-07-27", "1996-07-27",
    "1999-06-16", "1999-08-22", "2001-08-05",
    "2002-09-14", "2005-06-14")
@
  Extraire de ce vecteur les records du monde seulement, c'est-à-dire
  la première fois que chaque temps a été réalisé.
  \begin{sol}
<<>>=
temps[match(unique(cummin(tps)), temps)]
@
  \end{sol}
\end{exercice}

\Closesolutionfile{solutions}


%%% Local Variables:
%%% mode: latex
%%% TeX-engine: xetex
%%% TeX-master: "programmer-avec-r"
%%% coding: utf-8
%%% End:
